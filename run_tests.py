"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ NinjaEssayAI
"""

import os
import sys
import subprocess
import importlib.util
from pathlib import Path


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_packages = [
        "telegram", "openai", "python-docx", "python-dotenv", 
        "sqlalchemy", "yookassa"
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace("-", "_"))
            print(f"  ‚úÖ {package}")
        except ImportError:
            print(f"  ‚ùå {package}")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:")
        print(f"pip install {' '.join(missing_packages)}")
        return False
    
    print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True


def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    env_vars = [
        "TELEGRAM_BOT_TOKEN",
        "DEEPSEEK_API_KEY", 
        "YOOKASSA_SHOP_ID",
        "YOOKASSA_SECRET_KEY"
    ]
    
    missing_vars = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    env_file = Path(".env")
    if env_file.exists():
        print("  ‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω")
        
        with open(env_file, 'r', encoding='utf-8') as f:
            env_content = f.read()
            
        for var in env_vars:
            if f"{var}=" in env_content:
                print(f"  ‚úÖ {var}")
            else:
                print(f"  ‚ùå {var}")
                missing_vars.append(var)
    else:
        print("  ‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        missing_vars = env_vars
    
    if missing_vars:
        print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        return False
    
    return True


def check_file_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
    
    required_files = [
        "bot.py",
        "test_bot.py", 
        "code_analyzer.py"
    ]
    
    optional_files = [
        ".env",
        "requirements.txt",
        "requirements-test.txt",
        "README.md"
    ]
    
    missing_required = []
    
    for file in required_files:
        if Path(file).exists():
            print(f"  ‚úÖ {file}")
        else:
            print(f"  ‚ùå {file}")
            missing_required.append(file)
    
    for file in optional_files:
        if Path(file).exists():
            print(f"  ‚úÖ {file} (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
        else:
            print(f"  ‚ö™ {file} (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
    
    if missing_required:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã: {', '.join(missing_required)}")
        return False
    
    return True


def run_code_analysis():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞"""
    print("\nüîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        spec = importlib.util.spec_from_file_location("code_analyzer", "code_analyzer.py")
        analyzer_module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(analyzer_module)
        
        report = analyzer_module.run_full_analysis("bot.py")
        return report['status'] != 'ERROR'
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–¥–∞: {e}")
        return False


def run_syntax_check():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python —Ñ–∞–π–ª–æ–≤"""
    print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞...")
    
    python_files = ["bot.py", "test_bot.py", "code_analyzer.py"]
    
    for file in python_files:
        if Path(file).exists():
            try:
                with open(file, 'r', encoding='utf-8') as f:
                    compile(f.read(), file, 'exec')
                print(f"  ‚úÖ {file} - —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            except SyntaxError as e:
                print(f"  ‚ùå {file} - —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                return False
        else:
            print(f"  ‚ö™ {file} - —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    return True


def run_unit_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç unit —Ç–µ—Å—Ç—ã"""
    print("\nüß™ –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ pytest
        import pytest
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        result = subprocess.run([
            sys.executable, "-m", "pytest", 
            "test_bot.py", "-v", "--tb=short"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
            print(result.stdout)
            print(result.stderr)
            return False
            
    except ImportError:
        print("‚ö†Ô∏è pytest –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
        subprocess.run([sys.executable, "-m", "pip", "install", "pytest", "pytest-asyncio"])
        return run_unit_tests()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: {e}")
        return False


def create_test_report():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...")
    
    report = f"""
# –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞ NinjaEssayAI

## –î–∞—Ç–∞: {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
- ‚úÖ bot.py - –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞
- ‚úÖ test_bot.py - —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–∞–º–∏
- ‚úÖ code_analyzer.py - –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ–¥–∞
- ‚úÖ run_tests.py - —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤

## –ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏

### 1. –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
- –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã

### 2. –°–∏–Ω—Ç–∞–∫—Å–∏—Å
- –°–∏–Ω—Ç–∞–∫—Å–∏—Å –≤—Å–µ—Ö Python —Ñ–∞–π–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω

### 3. –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
- –ü—Ä–æ–≤–µ–¥–µ–Ω —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
- –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

### 4. Unit —Ç–µ—Å—Ç—ã
- –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
- –ü–æ–∫—Ä—ã—Ç—ã —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ—à–∏–±–æ–∫
- –ü—Ä–æ–≤–µ—Ä–µ–Ω –ø–æ–ª–Ω—ã–π workflow

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

1. **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å**:
   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ .env —Ñ–∞–π–ª–µ
   - –ù–µ –∫–æ–º–º–∏—Ç—å—Ç–µ –ø—Ä–æ–¥–∞–∫—à–Ω –∫–ª—é—á–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π

2. **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**:
   - –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API –ª–∏–º–∏—Ç–æ–≤
   - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

3. **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥**:
   - –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö

4. **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ**:
   - –†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Ç–µ—Å—Ç—ã
   - –î–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤—ã—à–µ.
"""
    
    with open("test_report.md", "w", encoding="utf-8") as f:
        f.write(report)
    
    print("‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_report.md")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
    print("ü§ñ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ NinjaEssayAI")
    print("=" * 60)
    
    checks = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤", check_file_structure),
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", check_dependencies), 
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", check_environment),
        ("–°–∏–Ω—Ç–∞–∫—Å–∏—Å", run_syntax_check),
        ("–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞", run_code_analysis),
        ("Unit —Ç–µ—Å—Ç—ã", run_unit_tests),
    ]
    
    results = {}
    
    for check_name, check_func in checks:
        print(f"\n{'='*20} {check_name} {'='*20}")
        try:
            results[check_name] = check_func()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ '{check_name}': {e}")
            results[check_name] = False
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "="*60)
    print("üìà –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("="*60)
    
    passed = 0
    total = len(results)
    
    for check_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù–û"
        print(f"{check_name:.<30} {status}")
        if result:
            passed += 1
    
    print(f"\n–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        grade = "–û–¢–õ–ò–ß–ù–û"
    elif passed >= total * 0.8:
        print("üëç –ë–û–õ–¨–®–ò–ù–°–¢–í–û –ü–†–û–í–ï–†–û–ö –ü–†–û–ô–î–ï–ù–û")
        grade = "–•–û–†–û–®–û"
    elif passed >= total * 0.6:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –ü–†–û–í–ï–†–ö–ò –ù–ï –ü–†–û–ô–î–ï–ù–´")
        grade = "–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"
    else:
        print("üîß –¢–†–ï–ë–£–Æ–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
        grade = "–ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"
    
    print(f"–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {grade}")
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    create_test_report()
    
    return passed == total


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
