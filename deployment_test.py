#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é
"""

import os
import sys
import asyncio
from pathlib import Path

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã...")
    
    try:
        import telegram
        print("‚úÖ python-telegram-bot")
    except ImportError as e:
        print(f"‚ùå python-telegram-bot: {e}")
        return False
    
    try:
        import openai
        print("‚úÖ openai")
    except ImportError as e:
        print(f"‚ùå openai: {e}")
        return False
    
    try:
        import docx
        print("‚úÖ python-docx")
    except ImportError as e:
        print(f"‚ùå python-docx: {e}")
        return False
    
    try:
        import yookassa
        print("‚úÖ yookassa")
    except ImportError as e:
        print(f"‚ùå yookassa: {e}")
        return False
    
    try:
        import sqlalchemy
        print("‚úÖ sqlalchemy")
    except ImportError as e:
        print(f"‚ùå sqlalchemy: {e}")
        return False
    
    try:
        from dotenv import load_dotenv
        print("‚úÖ python-dotenv")
    except ImportError as e:
        print(f"‚ùå python-dotenv: {e}")
        return False
    
    return True

def test_env_variables():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    from dotenv import load_dotenv
    load_dotenv()
    
    required_vars = [
        "TELEGRAM_BOT_TOKEN",
        "DEEPSEEK_API_KEY", 
        "YOOKASSA_SHOP_ID",
        "YOOKASSA_SECRET_KEY"
    ]
    
    missing_vars = []
    
    for var in required_vars:
        value = os.getenv(var)
        if value:
            print(f"‚úÖ {var}: {value[:10]}...")
        else:
            print(f"‚ùå {var}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            missing_vars.append(var)
    
    return len(missing_vars) == 0

def test_bot_syntax():
    """–¢–µ—Å—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –±–æ—Ç–∞"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å bot.py...")
    
    try:
        import bot
        print("‚úÖ bot.py –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫")
        return True
    except SyntaxError as e:
        print(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ bot.py: {e}")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ bot.py: {e}")
        return True  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–ª—é—á–∞–º–∏, –Ω–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å OK

def test_functions_exist():
    """–¢–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏...")
    
    try:
        import bot
        
        required_functions = [
            'start', 'help_command', 'order', 'work_type_handler',
            'science_name_handler', 'page_number_handler', 'work_theme_handler',
            'preferences_handler', 'contact_handler', 'create_payment',
            'generate_plan', 'generate_text', 'cancel', 'main'
        ]
        
        missing_functions = []
        
        for func_name in required_functions:
            if hasattr(bot, func_name):
                print(f"‚úÖ {func_name}")
            else:
                print(f"‚ùå {func_name}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                missing_functions.append(func_name)
        
        return len(missing_functions) == 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        return False

def test_file_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        "bot.py",
        "requirements.txt",
        ".env"
    ]
    
    missing_files = []
    
    for file_name in required_files:
        if Path(file_name).exists():
            print(f"‚úÖ {file_name}")
        else:
            print(f"‚ùå {file_name}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
            missing_files.append(file_name)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–µ—Ç—Å—è –ª–∏ –ø–∞–ø–∫–∞ generated
    generated_dir = Path("generated")
    if not generated_dir.exists():
        try:
            generated_dir.mkdir(exist_ok=True)
            print("‚úÖ generated/ (—Å–æ–∑–¥–∞–Ω–∞)")
        except Exception as e:
            print(f"‚ùå generated/: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è - {e}")
            return False
    else:
        print("‚úÖ generated/")
    
    return len(missing_files) == 0

async def test_async_functions():
    """–¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏...")
    
    try:
        import bot
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        class MockUpdate:
            def __init__(self):
                self.effective_user = MockUser()
                self.message = MockMessage()
        
        class MockUser:
            def __init__(self):
                self.id = 123456
        
        class MockMessage:
            def __init__(self):
                self.text = "—Ç–µ—Å—Ç"
                self.reply_text = lambda x, **kwargs: None
        
        class MockContext:
            def __init__(self):
                self.user_data = {}
                self.bot = MockBot()
        
        class MockBot:
            def __init__(self):
                pass
        
        update = MockUpdate()
        context = MockContext()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        try:
            # –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å –º–æ–∫-–æ–±—ä–µ–∫—Ç–∞–º–∏
            print("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö: {e}")
            return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
    
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö: {e}")
        return False

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é\n")
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π", test_imports),
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", test_env_variables),
        ("–°–∏–Ω—Ç–∞–∫—Å–∏—Å bot.py", test_bot_syntax),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤", test_file_structure),
        ("–°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π", test_functions_exist),
        ("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏", test_async_functions),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = asyncio.run(test_func())
            else:
                result = test_func()
            
            if result:
                passed += 1
                print(f"‚úÖ {test_name}: –ü–†–û–®–ï–õ")
            else:
                print(f"‚ùå {test_name}: –ù–ï –ü–†–û–®–ï–õ")
        except Exception as e:
            print(f"üí• {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    print(f"\nüìä –ò–¢–û–ì–û: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é!")
        return True
    elif passed >= total - 1:
        print("\n‚ö†Ô∏è –ü–æ—á—Ç–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏. –ë–æ—Ç –º–æ–∂–Ω–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞—Ç—å —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏.")
        return True
    else:
        print("\n‚ùå –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º.")
        return False

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)
