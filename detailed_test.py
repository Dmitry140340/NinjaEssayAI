#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
"""

import asyncio
import tempfile
import os
from unittest.mock import Mock, AsyncMock

def test_validation_functions():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
    
    try:
        from bot import sanitize_filename, validate_user_input, validate_contact
        
        # –¢–µ—Å—Ç sanitize_filename
        assert sanitize_filename("test<>file") == "test__file"
        assert sanitize_filename("") == "default"
        print("‚úÖ sanitize_filename —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç validate_user_input
        assert validate_user_input("test input") == "test input"
        try:
            validate_user_input("")
            assert False, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –≤–≤–æ–¥–∞"
        except ValueError:
            pass
        print("‚úÖ validate_user_input —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç validate_contact
        assert validate_contact("test@example.com") == "test@example.com"
        assert validate_contact("+1234567890") == "+1234567890"
        try:
            validate_contact("invalid")
            assert False, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"
        except ValueError:
            pass
        print("‚úÖ validate_contact —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False

def test_database_models():
    """–¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from bot import UserAction, Base, engine
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç—Å—è
        user_action = UserAction(
            user_id="123",
            action="test_action"
        )
        
        print("‚úÖ UserAction –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç—Å—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã
        assert hasattr(UserAction, '__tablename__')
        assert UserAction.__tablename__ == "user_actions"
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_actions –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–¥–µ–ª—è—Ö –ë–î: {e}")
        return False

def test_constants():
    """–¢–µ—Å—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã...")
    
    try:
        from bot import PAGE_LIMITS, WORK_TYPE, SCIENCE_NAME, PAGE_NUMBER
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü
        assert PAGE_LIMITS["–≠—Å—Å–µ"] == 10
        assert PAGE_LIMITS["–ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞"] == 30
        print("‚úÖ PAGE_LIMITS –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        assert isinstance(WORK_TYPE, int)
        assert isinstance(SCIENCE_NAME, int)
        assert isinstance(PAGE_NUMBER, int)
        print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞—Ö: {e}")
        return False

async def test_mock_handlers():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –º–æ–∫-–æ–±—ä–µ–∫—Ç–∞–º–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –º–æ–∫-–æ–±—ä–µ–∫—Ç–∞–º–∏...")
    
    try:
        from bot import work_type_handler, science_name_handler, SCIENCE_NAME, PAGE_NUMBER
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã
        mock_update = Mock()
        mock_update.message = Mock()
        mock_update.message.text = "üìù –≠—Å—Å–µ - 300‚ÇΩ"
        mock_update.message.reply_text = AsyncMock()
        
        mock_context = Mock()
        mock_context.user_data = {}
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º work_type_handler
        result = await work_type_handler(mock_update, mock_context)
        assert result == SCIENCE_NAME
        assert "work_type" in mock_context.user_data
        assert "price" in mock_context.user_data
        print("‚úÖ work_type_handler —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º science_name_handler
        mock_update.message.text = "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
        mock_context.user_data = {"work_type": "üìù –≠—Å—Å–µ"}
        
        result = await science_name_handler(mock_update, mock_context)
        assert result == PAGE_NUMBER
        assert mock_context.user_data["science_name"] == "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
        print("‚úÖ science_name_handler —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö: {e}")
        return False

def test_document_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    
    try:
        import docx
        from bot import add_page_number
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        doc = docx.Document()
        section = doc.sections[0]
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
        add_page_number(section)
        print("‚úÖ add_page_number —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        with tempfile.NamedTemporaryFile(suffix='.docx', delete=False) as tmp:
            doc.save(tmp.name)
            assert os.path.exists(tmp.name)
            os.unlink(tmp.name)
        print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        return False

def test_api_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API...")
    
    try:
        from bot import client, Configuration
        from openai import AsyncOpenAI
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
        assert isinstance(client, AsyncOpenAI)
        print("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º YooKassa
        assert hasattr(Configuration, 'account_id')
        assert hasattr(Configuration, 'secret_key')
        print("‚úÖ YooKassa –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API: {e}")
        return False

async def run_detailed_tests():
    """–ó–∞–ø—É—Å–∫ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏\n")
    
    tests = [
        ("–§—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", test_validation_functions),
        ("–ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", test_database_models),
        ("–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_constants),
        ("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–º–æ–∫)", test_mock_handlers),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", test_document_generation),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API", test_api_configuration),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            
            if result:
                passed += 1
                print(f"‚úÖ {test_name}: –ü–†–û–®–ï–õ")
            else:
                print(f"‚ùå {test_name}: –ù–ï –ü–†–û–®–ï–õ")
        except Exception as e:
            print(f"üí• {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    print(f"\nüìä –ò–¢–û–ì–û: {passed}/{total} –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed >= total - 1:
        print("\nüéâ –î–ï–¢–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´ –í –û–°–ù–û–í–ù–û–ú –ü–†–û–®–õ–ò!")
        return True
    else:
        print("\n‚ùå –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –≤ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö.")
        return False

if __name__ == "__main__":
    import sys
    success = asyncio.run(run_detailed_tests())
    sys.exit(0 if success else 1)
