#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è NinjaEssayAI –±–æ—Ç–∞
–ü–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–µ–º–∞—Ñ–æ—Ä–∞
"""
import asyncio
import sqlite3
from datetime import datetime, timedelta
import os

def check_semaphore_load():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    print("üîç –ê–Ω–∞–ª–∏–∑ –Ω–∞–≥—Ä—É–∑–∫–∏ NinjaEssayAI –±–æ—Ç–∞...")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –±–æ—Ç–∞
    if not os.path.exists('user_activity.db'):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö user_activity.db –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    conn = sqlite3.connect('user_activity.db')
    cursor = conn.cursor()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
    periods = [
        ('—á–∞—Å', 1),
        ('–¥–µ–Ω—å', 24),
        ('–Ω–µ–¥–µ–ª—é', 24 * 7)
    ]
    
    for period_name, hours in periods:
        time_ago = datetime.now() - timedelta(hours=hours)
        
        cursor.execute('''
            SELECT COUNT(*) FROM user_actions 
            WHERE timestamp > ? AND action LIKE '%generate%'
        ''', (time_ago,))
        
        generations = cursor.fetchone()[0]
        avg_per_hour = generations / hours if hours > 0 else 0
        
        print(f"üìä –ó–∞ {period_name}: {generations} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ({avg_per_hour:.1f}/—á–∞—Å)")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–µ–º–∞—Ñ–æ—Ä—É
    print("\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–µ–º–∞—Ñ–æ—Ä—É:")
    
    cursor.execute('''
        SELECT COUNT(*) FROM user_actions 
        WHERE timestamp > ? AND action LIKE '%generate%'
    ''', (datetime.now() - timedelta(hours=1),))
    
    last_hour = cursor.fetchone()[0]
    
    if last_hour == 0:
        print("‚úÖ –ù–∞–≥—Ä—É–∑–∫–∞: –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø - —Å–µ–º–∞—Ñ–æ—Ä 5")
    elif last_hour < 10:
        print("‚úÖ –ù–∞–≥—Ä—É–∑–∫–∞: –ù–ò–ó–ö–ê–Ø - —Å–µ–º–∞—Ñ–æ—Ä 10 (—Ç–µ–∫—É—â–∏–π)")
    elif last_hour < 30:
        print("‚ö†Ô∏è  –ù–∞–≥—Ä—É–∑–∫–∞: –°–†–ï–î–ù–Ø–Ø - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–µ–º–∞—Ñ–æ—Ä 15")
    elif last_hour < 60:
        print("üî• –ù–∞–≥—Ä—É–∑–∫–∞: –í–´–°–û–ö–ê–Ø - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–µ–º–∞—Ñ–æ—Ä 20")
    else:
        print("üö® –ù–∞–≥—Ä—É–∑–∫–∞: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–µ–º–∞—Ñ–æ—Ä 30+")
    
    # –ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã
    print("\n‚è∞ –ê–Ω–∞–ª–∏–∑ –ø–∏–∫–æ–≤—ã—Ö —á–∞—Å–æ–≤:")
    cursor.execute('''
        SELECT 
            strftime('%H', timestamp) as hour,
            COUNT(*) as count
        FROM user_actions 
        WHERE timestamp > ? AND action LIKE '%generate%'
        GROUP BY hour
        ORDER BY count DESC
        LIMIT 5
    ''', (datetime.now() - timedelta(days=7),))
    
    peak_hours = cursor.fetchall()
    for hour, count in peak_hours:
        print(f"üïê {hour}:00 - {count} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π")
    
    conn.close()
    
    print("\n" + "=" * 50)
    print("üí° –°–æ–≤–µ—Ç: –ó–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!")

if __name__ == "__main__":
    check_semaphore_load()
