"""
üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞ NinjaEssayAI
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
"""

import os
import sys
import importlib.util
from pathlib import Path

def check_emoji(status: bool) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞"""
    return "‚úÖ" if status else "‚ùå"

def print_section(title: str):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"""
    print("\n" + "="*70)
    print(f"  {title}")
    print("="*70)

def check_file_exists(filepath: str, description: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    exists = Path(filepath).exists()
    print(f"{check_emoji(exists)} {description}: {filepath}")
    return exists

def check_env_variable(var_name: str, description: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    value = os.getenv(var_name)
    exists = value is not None and value != ""
    status = check_emoji(exists)
    masked_value = value[:4] + "..." if exists and len(value) > 4 else "–ù–ï –ó–ê–î–ê–ù–ê"
    print(f"{status} {description}: {masked_value}")
    return exists

def check_module_import(module_name: str, description: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è"""
    try:
        __import__(module_name)
        print(f"‚úÖ {description}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    except ImportError as e:
        print(f"‚ùå {description}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù - {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("\n" + "üîç" * 35)
    print("  –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–û–¢–ê NinjaEssayAI")
    print("üîç" * 35)
    
    all_checks = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
    print_section("üìÅ –§–ê–ô–õ–´ –ü–†–û–ï–ö–¢–ê")
    all_checks.append(check_file_exists("bot.py", "–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞"))
    all_checks.append(check_file_exists("requirements.txt", "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"))
    all_checks.append(check_file_exists(".env", "–§–∞–π–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"))
    all_checks.append(check_file_exists("README.md", "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"))
    all_checks.append(check_file_exists("TESTING.md", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"))
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print_section("üîë –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env
    try:
        from dotenv import load_dotenv
        load_dotenv()
        print("‚úÖ –§–∞–π–ª .env –∑–∞–≥—Ä—É–∂–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env: {e}")
        all_checks.append(False)
    
    all_checks.append(check_env_variable("TELEGRAM_BOT_TOKEN", "–¢–æ–∫–µ–Ω Telegram"))
    all_checks.append(check_env_variable("DEEPSEEK_API_KEY", "API –∫–ª—é—á DeepSeek"))
    yookassa_shop = check_env_variable("YOOKASSA_SHOP_ID", "YooKassa Shop ID")
    yookassa_key = check_env_variable("YOOKASSA_SECRET_KEY", "YooKassa Secret Key")
    
    if not (yookassa_shop and yookassa_key):
        print("‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: YooKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞, –ø–ª–∞—Ç–µ–∂–∏ –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print_section("üì¶ –ó–ê–í–ò–°–ò–ú–û–°–¢–ò Python")
    dependencies = [
        ("telegram", "python-telegram-bot"),
        ("openai", "openai (DeepSeek API)"),
        ("docx", "python-docx"),
        ("dotenv", "python-dotenv"),
        ("sqlalchemy", "SQLAlchemy"),
        ("yookassa", "YooKassa SDK"),
    ]
    
    for module, description in dependencies:
        all_checks.append(check_module_import(module, description))
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
    print_section("ü§ñ –ú–û–î–£–õ–¨ –ë–û–¢–ê")
    try:
        import bot
        print("‚úÖ –ú–æ–¥—É–ª—å bot.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        print(f"\nüìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞:")
        print(f"   ‚Ä¢ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: {'–í–ö–õ üß™' if bot.TESTING_MODE else '–í–´–ö–õ üí≥'}")
        print(f"   ‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {len(bot.ADMIN_IDS)} —á–µ–ª.")
        print(f"   ‚Ä¢ Rate limit: {bot.MAX_REQUESTS_PER_HOUR} –∑–∞–ø—Ä–æ—Å–æ–≤/—á–∞—Å")
        print(f"   ‚Ä¢ –û–∫–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: {bot.REQUEST_WINDOW} —Å–µ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        print(f"\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:")
        test_results = []
        
        # –¢–µ—Å—Ç —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏
        try:
            result = bot.sanitize_filename("Test<>File")
            assert '<' not in result and '>' not in result
            print(f"   ‚úÖ sanitize_filename —Ä–∞–±–æ—Ç–∞–µ—Ç")
            test_results.append(True)
        except Exception as e:
            print(f"   ‚ùå sanitize_filename: {e}")
            test_results.append(False)
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        try:
            result = bot.validate_user_input("Test input")
            assert result == "Test input"
            print(f"   ‚úÖ validate_user_input —Ä–∞–±–æ—Ç–∞–µ—Ç")
            test_results.append(True)
        except Exception as e:
            print(f"   ‚ùå validate_user_input: {e}")
            test_results.append(False)
        
        # –¢–µ—Å—Ç –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–π
        try:
            result = bot.is_admin(bot.ADMIN_IDS[0])
            assert result == True
            print(f"   ‚úÖ is_admin —Ä–∞–±–æ—Ç–∞–µ—Ç")
            test_results.append(True)
        except Exception as e:
            print(f"   ‚ùå is_admin: {e}")
            test_results.append(False)
        
        # –¢–µ—Å—Ç rate limiting
        try:
            result = bot.check_rate_limit(999999)
            assert result == True
            print(f"   ‚úÖ check_rate_limit —Ä–∞–±–æ—Ç–∞–µ—Ç")
            test_results.append(True)
        except Exception as e:
            print(f"   ‚ùå check_rate_limit: {e}")
            test_results.append(False)
        
        all_checks.extend(test_results)
        all_checks.append(True)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ bot.py: {e}")
        all_checks.append(False)
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print_section("üíæ –ë–ê–ó–ê –î–ê–ù–ù–´–•")
    db_file = "user_activity.db"
    if Path(db_file).exists():
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {db_file}")
        size = Path(db_file).stat().st_size
        print(f"   –†–∞–∑–º–µ—Ä: {size} –±–∞–π—Ç")
        all_checks.append(True)
    else:
        print(f"‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ")
        all_checks.append(True)  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    
    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤
    print_section("üß™ –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –¢–ï–°–¢–´")
    if Path("test_bot.py").exists():
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: test_bot.py")
        print("   –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: py test_bot.py")
        all_checks.append(True)
    else:
        print("‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        all_checks.append(False)
    
    # 7. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print_section("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    
    total_checks = len(all_checks)
    passed_checks = sum(all_checks)
    failed_checks = total_checks - passed_checks
    success_rate = (passed_checks / total_checks * 100) if total_checks > 0 else 0
    
    print(f"\n–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {total_checks}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed_checks}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_checks}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
    print("\n" + "="*70)
    if success_rate >= 90:
        print("üéâ –ë–û–¢ –ì–û–¢–û–í –ö –ó–ê–ü–£–°–ö–£!")
        print("   –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã.")
        print("\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("   py bot.py")
    elif success_rate >= 70:
        print("‚ö†Ô∏è  –ë–û–¢ –ß–ê–°–¢–ò–ß–ù–û –ì–û–¢–û–í")
        print("   –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã, –Ω–æ –±–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
        print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
    else:
        print("‚ùå –ë–û–¢ –ù–ï –ì–û–¢–û–í –ö –ó–ê–ü–£–°–ö–£")
        print("   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.")
        print("   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
    print("="*70 + "\n")
    
    return 0 if success_rate >= 70 else 1

if __name__ == '__main__':
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
