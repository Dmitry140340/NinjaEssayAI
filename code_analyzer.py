"""
–ê–Ω–∞–ª–∏–∑ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞ –±–æ—Ç–∞ NinjaEssayAI
"""

import ast
import os
import re
from typing import List, Dict, Any


class CodeAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º"""
    
    def __init__(self, file_path: str):
        self.file_path = file_path
        self.issues = []
        self.warnings = []
        self.suggestions = []
        
    def analyze(self) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞"""
        print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª: {self.file_path}")
        
        try:
            with open(self.file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # –ü–∞—Ä—Å–∏–º AST
            try:
                tree = ast.parse(content)
                self._analyze_ast(tree)
            except SyntaxError as e:
                self.issues.append(f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            self._analyze_text(content)
            
            return self._generate_report()
            
        except FileNotFoundError:
            self.issues.append(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.file_path}")
            return self._generate_report()
        except Exception as e:
            self.issues.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
            return self._generate_report()
    
    def _analyze_ast(self, tree: ast.AST):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç AST –¥–µ—Ä–µ–≤–æ"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        functions = [node for node in ast.walk(tree) if isinstance(node, ast.FunctionDef)]
        async_functions = [f for f in functions if f.name.startswith('async') or 
                          any(isinstance(d, ast.AsyncFunctionDef) for d in ast.walk(tree))]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ñ—É–Ω–∫—Ü–∏–π
        for func in functions:
            lines = func.end_lineno - func.lineno if hasattr(func, 'end_lineno') else 0
            if lines > 50:
                self.warnings.append(f"–§—É–Ω–∫—Ü–∏—è '{func.name}' —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è ({lines} —Å—Ç—Ä–æ–∫)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        try_blocks = [node for node in ast.walk(tree) if isinstance(node, ast.Try)]
        if len(try_blocks) < 5:
            self.suggestions.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
        imports = [node for node in ast.walk(tree) if isinstance(node, (ast.Import, ast.ImportFrom))]
        if len(imports) > 15:
            self.suggestions.append("–ú–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–æ–≤ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥")
    
    def _analyze_text(self, content: str):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"""
        
        lines = content.split('\n')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫
        long_lines = [(i+1, line) for i, line in enumerate(lines) if len(line) > 120]
        if long_lines:
            self.warnings.append(f"–ù–∞–π–¥–µ–Ω–æ {len(long_lines)} –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ (>120 —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º TODOs –∏ FIXMEs
        todos = [(i+1, line) for i, line in enumerate(lines) 
                if 'TODO' in line.upper() or 'FIXME' in line.upper()]
        if todos:
            self.suggestions.append(f"–ù–∞–π–¥–µ–Ω–æ {len(todos)} TODO/FIXME –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–∞—Ä–¥–∫–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è
        hardcoded_patterns = [
            r'YOOKASSA_SHOP_ID.*"1048732"',
            r'YOOKASSA_SECRET_KEY.*"live_.*"',
        ]
        
        for pattern in hardcoded_patterns:
            if re.search(pattern, content):
                self.warnings.append(f"–ù–∞–π–¥–µ–Ω—ã —Ö–∞—Ä–¥–∫–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è: {pattern}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logging_calls = len(re.findall(r'logging\.(info|error|warning|debug)', content))
        if logging_calls < 10:
            self.suggestions.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º async/await usage
        async_funcs = len(re.findall(r'async def', content))
        await_calls = len(re.findall(r'await ', content))
        
        if async_funcs > 0 and await_calls < async_funcs * 2:
            self.warnings.append("–í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –≤—Å–µ async —Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç await –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def _generate_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ–± –∞–Ω–∞–ª–∏–∑–µ"""
        return {
            'file': self.file_path,
            'issues': self.issues,
            'warnings': self.warnings,
            'suggestions': self.suggestions,
            'total_problems': len(self.issues) + len(self.warnings),
            'status': 'ERROR' if self.issues else 'WARNING' if self.warnings else 'OK'
        }


def check_security_issues(file_path: str) -> List[str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    issues = []
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏ –≤ –∫–æ–¥–µ
        if 'live_' in content:
            issues.append("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –ø—Ä–æ–¥–∞–∫—à–Ω –∫–ª—é—á –≤ –∫–æ–¥–µ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º SQL injection –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        if 'query' in content.lower() and '%' in content:
            issues.append("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞—è SQL injection —É—è–∑–≤–∏–º–æ—Å—Ç—å")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ eval/exec
        if 'eval(' in content or 'exec(' in content:
            issues.append("üî¥ –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ eval/exec")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–æ–≤ –±–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª—è –ø—É—Ç–∏
        if 'open(' in content and '..' in content:
            issues.append("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞—è path traversal —É—è–∑–≤–∏–º–æ—Å—Ç—å")
            
    except Exception as e:
        issues.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
    
    return issues


def check_performance_issues(file_path: str) -> List[str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    issues = []
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ async —Ñ—É–Ω–∫—Ü–∏—è—Ö
        async_funcs = re.findall(r'async def.*?(?=async def|\Z)', content, re.DOTALL)
        for func in async_funcs:
            if 'sleep(' in func and 'await asyncio.sleep' not in func:
                issues.append("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ time.sleep –≤ async —Ñ—É–Ω–∫—Ü–∏–∏")
            
            if 'requests.' in func:
                issues.append("‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã –≤ async —Ñ—É–Ω–∫—Ü–∏–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ API –≤—ã–∑–æ–≤—ã –±–µ–∑ –±–∞—Ç—á–∏–Ω–≥–∞
        api_calls = len(re.findall(r'client\.chat\.completions', content))
        if api_calls > 3:
            issues.append("‚ÑπÔ∏è –ú–Ω–æ–≥–æ API –≤—ã–∑–æ–≤–æ–≤ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –±–∞—Ç—á–∏–Ω–≥")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ async
        if 'open(' in content and 'aiofiles' not in content:
            issues.append("‚ÑπÔ∏è –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ aiofiles –¥–ª—è async IO")
            
    except Exception as e:
        issues.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
    
    return issues


def run_full_analysis(file_path: str = "bot.py"):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞"""
    print("üîç –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –±–æ—Ç–∞ NinjaEssayAI")
    print("=" * 50)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑
    analyzer = CodeAnalyzer(file_path)
    report = analyzer.analyze()
    
    print(f"\nüìä –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞: {report['status']}")
    print(f"üìà –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: {report['total_problems']}")
    
    if report['issues']:
        print("\nüî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        for issue in report['issues']:
            print(f"  ‚Ä¢ {issue}")
    
    if report['warnings']:
        print("\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
        for warning in report['warnings']:
            print(f"  ‚Ä¢ {warning}")
    
    if report['suggestions']:
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for suggestion in report['suggestions']:
            print(f"  ‚Ä¢ {suggestion}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    print("\nüîí –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
    security_issues = check_security_issues(file_path)
    if security_issues:
        for issue in security_issues:
            print(f"  {issue}")
    else:
        print("  ‚úÖ –°–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print("\n‚ö° –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    performance_issues = check_performance_issues(file_path)
    if performance_issues:
        for issue in performance_issues:
            print(f"  {issue}")
    else:
        print("  ‚úÖ –°–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    print("\n" + "=" * 50)
    total_all_issues = (len(report['issues']) + len(report['warnings']) + 
                       len(security_issues) + len(performance_issues))
    
    if total_all_issues == 0:
        print("üéâ –ö–æ–¥ –≤—ã–≥–ª—è–¥–∏—Ç —Ö–æ—Ä–æ—à–æ!")
        grade = "A"
    elif total_all_issues <= 5:
        print("üëç –ö–æ–¥ –≤ —Ü–µ–ª–æ–º —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
        grade = "B"
    elif total_all_issues <= 10:
        print("‚ö†Ô∏è –ö–æ–¥ —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π")
        grade = "C"
    else:
        print("üîß –ö–æ–¥ —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π")
        grade = "D"
    
    print(f"üìù –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {grade}")
    
    return report


if __name__ == "__main__":
    run_full_analysis()
