import pytest
import asyncio
import os
import tempfile
import shutil
from unittest.mock import Mock, AsyncMock, patch, MagicMock
from telegram import Update, User, Message, Chat, CallbackQuery
from telegram.ext import CallbackContext
import sqlite3
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –±–æ—Ç
import sys
sys.path.append('.')
from bot import (
    start, help_command, menu, continue_handler, order, 
    work_type_handler, science_name_handler, page_number_handler,
    work_theme_handler, preferences_handler, contact_handler,
    create_payment, generate_plan, generate_text,
    cancel, log_user_action, UserAction, Base, engine, SessionLocal
)

class TestBot:
    """–¢–µ—Å—Ç—ã –¥–ª—è Telegram –±–æ—Ç–∞ NinjaEssayAI"""
    
    @pytest.fixture
    def setup_test_db(self):
        """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        test_db_path = ":memory:"
        from sqlalchemy import create_engine
        from sqlalchemy.orm import sessionmaker
        
        test_engine = create_engine(f"sqlite:///{test_db_path}")
        Base.metadata.create_all(bind=test_engine)
        TestSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=test_engine)
        
        yield TestSessionLocal
        
    @pytest.fixture
    def mock_update(self):
        """–°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç Update"""
        update = Mock(spec=Update)
        update.effective_user = Mock(spec=User)
        update.effective_user.id = 12345
        update.effective_user.username = "testuser"
        
        update.message = Mock(spec=Message)
        update.message.chat = Mock(spec=Chat)
        update.message.chat.id = 67890
        update.message.reply_text = AsyncMock()
        update.message.reply_document = AsyncMock()
        update.message.text = "—Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        
        return update
    
    @pytest.fixture
    def mock_context(self):
        """–°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç CallbackContext"""
        context = Mock(spec=CallbackContext)
        context.user_data = {}
        context.bot = Mock()
        context.bot.send_message = AsyncMock()
        context.bot.send_document = AsyncMock()
        context.bot.username = "testbot"
        context._chat_id = 67890
        return context
    
    @pytest.mark.asyncio
    async def test_start_command(self, mock_update, mock_context):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /start"""
        with patch('bot.log_user_action') as mock_log:
            await start(mock_update, mock_context)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–≤–∞–Ω–æ
            mock_log.assert_called_once_with(12345, "start_command")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            mock_update.message.reply_text.assert_called_once()
            call_args = mock_update.message.reply_text.call_args[0][0]
            assert "NinjaEssayAI" in call_args
            assert "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º" in call_args
    
    @pytest.mark.asyncio
    async def test_help_command(self, mock_update, mock_context):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /help"""
        await help_command(mock_update, mock_context)
        
        mock_update.message.reply_text.assert_called_once()
        call_args = mock_update.message.reply_text.call_args[0][0]
        assert "/order" in call_args
        assert "/cancel" in call_args
        assert "/help" in call_args
    
    @pytest.mark.asyncio
    async def test_menu_command(self, mock_update, mock_context):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /menu"""
        await menu(mock_update, mock_context)
        
        mock_update.message.reply_text.assert_called_once()
        call_args = mock_update.message.reply_text.call_args[0][0]
        assert "–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥" in call_args
    
    @pytest.mark.asyncio
    async def test_continue_handler(self, mock_update, mock_context):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'"""
        with patch('bot.log_user_action') as mock_log:
            await continue_handler(mock_update, mock_context)
            
            mock_log.assert_called_once_with(12345, "accepted_terms")
            mock_update.message.reply_text.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_order_command(self, mock_update, mock_context):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /order"""
        with patch('bot.log_user_action') as mock_log:
            result = await order(mock_update, mock_context)
            
            mock_log.assert_called_once_with(12345, "order_command")
            mock_update.message.reply_text.assert_called_once()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            from bot import WORK_TYPE
            assert result == WORK_TYPE
    
    @pytest.mark.asyncio
    async def test_work_type_handler(self, mock_update, mock_context):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã"""
        mock_update.message.text = "üìù –≠—Å—Å–µ - 300‚ÇΩ"
        
        result = await work_type_handler(mock_update, mock_context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
        assert mock_context.user_data["work_type"] == "üìù –≠—Å—Å–µ"
        assert mock_context.user_data["price"] == 300
        
        from bot import SCIENCE_NAME
        assert result == SCIENCE_NAME
    
    @pytest.mark.asyncio
    async def test_science_name_handler(self, mock_update, mock_context):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"""
        mock_update.message.text = "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
        mock_context.user_data = {"work_type": "üìù –≠—Å—Å–µ"}
        
        result = await science_name_handler(mock_update, mock_context)
        
        assert mock_context.user_data["science_name"] == "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
        from bot import PAGE_NUMBER
        assert result == PAGE_NUMBER
    
    @pytest.mark.asyncio
    async def test_page_number_handler_valid(self, mock_update, mock_context):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü - –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥"""
        mock_update.message.text = "5"
        mock_context.user_data = {"work_type": "üìù –≠—Å—Å–µ"}
        
        result = await page_number_handler(mock_update, mock_context)
        
        assert mock_context.user_data["page_number"] == 5
        from bot import WORK_THEME
        assert result == WORK_THEME
    
    @pytest.mark.asyncio
    async def test_page_number_handler_invalid(self, mock_update, mock_context):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥"""
        mock_update.message.text = "abc"
        mock_context.user_data = {"work_type": "üìù –≠—Å—Å–µ"}
        
        result = await page_number_handler(mock_update, mock_context)
        
        # –î–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        from bot import PAGE_NUMBER
        assert result == PAGE_NUMBER
        mock_update.message.reply_text.assert_called_with("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
    
    @pytest.mark.asyncio
    async def test_page_number_handler_exceeds_limit(self, mock_update, mock_context):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü - –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞"""
        mock_update.message.text = "15"  # –õ–∏–º–∏—Ç –¥–ª—è —ç—Å—Å–µ - 10
        mock_context.user_data = {"work_type": "üìù –≠—Å—Å–µ"}
        
        result = await page_number_handler(mock_update, mock_context)
        
        from bot import PAGE_NUMBER
        assert result == PAGE_NUMBER
        mock_update.message.reply_text.assert_called()
        call_args = mock_update.message.reply_text.call_args[0][0]
        assert "–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü" in call_args
    
    @pytest.mark.asyncio
    async def test_work_theme_handler(self, mock_update, mock_context):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–º—ã —Ä–∞–±–æ—Ç—ã"""
        mock_update.message.text = "–ò–Ω—Ç–µ–≥—Ä–∞–ª—ã –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ"
        
        result = await work_theme_handler(mock_update, mock_context)
        
        assert mock_context.user_data["work_theme"] == "–ò–Ω—Ç–µ–≥—Ä–∞–ª—ã –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ"
        from bot import PREFERENCES
        assert result == PREFERENCES
    
    @pytest.mark.asyncio
    async def test_preferences_handler(self, mock_update, mock_context):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
        mock_update.message.text = "–ù–∞—É—á–Ω—ã–π —Å—Ç–∏–ª—å, –º–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤"
        mock_context.user_data = {
            "work_type": "üìù –≠—Å—Å–µ",
            "science_name": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
            "work_theme": "–ò–Ω—Ç–µ–≥—Ä–∞–ª—ã",
            "page_number": 5,
            "price": 300
        }
        
        result = await preferences_handler(mock_update, mock_context)
        
        assert mock_context.user_data["preferences"] == "–ù–∞—É—á–Ω—ã–π —Å—Ç–∏–ª—å, –º–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤"
        from bot import CUSTOMER_CONTACT
        assert result == CUSTOMER_CONTACT
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∫–∞–∑–∞–Ω–∞ —Å–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞
        mock_update.message.reply_text.assert_called()
    
    @pytest.mark.asyncio
    async def test_contact_handler_valid_email(self, mock_update, mock_context):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ - –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email"""
        mock_update.message.text = "test@example.com"
        mock_context.user_data = {"work_type": "üìù –≠—Å—Å–µ", "price": 300}
        
        result = await contact_handler(mock_update, mock_context)
        
        assert mock_context.user_data["receipt_customer"] == "test@example.com"
        from bot import PAYMENT
        assert result == PAYMENT
    
    @pytest.mark.asyncio
    async def test_contact_handler_valid_phone(self, mock_update, mock_context):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ - –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω"""
        mock_update.message.text = "+71234567890"
        mock_context.user_data = {"work_type": "üìù –≠—Å—Å–µ", "price": 300}
        
        result = await contact_handler(mock_update, mock_context)
        
        assert mock_context.user_data["receipt_customer"] == "+71234567890"
        from bot import PAYMENT
        assert result == PAYMENT
    
    @pytest.mark.asyncio
    async def test_contact_handler_invalid(self, mock_update, mock_context):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        mock_update.message.text = "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π_–∫–æ–Ω—Ç–∞–∫—Ç"
        mock_context.user_data = {"work_type": "üìù –≠—Å—Å–µ", "price": 300}
        
        result = await contact_handler(mock_update, mock_context)
        
        from bot import CUSTOMER_CONTACT
        assert result == CUSTOMER_CONTACT
        mock_update.message.reply_text.assert_called_with(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, +71234567890):"
        )
    
    @pytest.mark.asyncio
    async def test_cancel_handler(self, mock_update, mock_context):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã"""
        from telegram.ext import ConversationHandler
        
        result = await cancel(mock_update, mock_context)
        
        assert result == ConversationHandler.END
        mock_update.message.reply_text.assert_called_with("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")
    
    @pytest.mark.asyncio 
    async def test_log_user_action(self, setup_test_db):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        TestSessionLocal = setup_test_db
        
        with patch('bot.SessionLocal', TestSessionLocal):
            await log_user_action("12345", "test_action")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É
            session = TestSessionLocal()
            try:
                action = session.query(UserAction).filter_by(user_id="12345").first()
                assert action is not None
                assert action.action == "test_action"
            finally:
                session.close()
    
    @pytest.mark.asyncio
    async def test_generate_plan_success(self, mock_context):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–ª–∞–Ω–∞"""
        mock_context.user_data = {
            "science_name": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
            "work_type": "üìù –≠—Å—Å–µ", 
            "work_theme": "–ò–Ω—Ç–µ–≥—Ä–∞–ª—ã",
            "preferences": "–ù–∞—É—á–Ω—ã–π —Å—Ç–∏–ª—å",
            "page_number": 4
        }
        
        # –ú–æ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
        mock_response = AsyncMock()
        mock_response.choices = [Mock()]
        mock_response.choices[0].message = Mock()
        mock_response.choices[0].message.content = "1. –í–≤–µ–¥–µ–Ω–∏–µ\n2. –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å"
        
        with patch('bot.client.chat.completions.create', return_value=mock_response):
            result = await generate_plan(mock_context)
            
            assert isinstance(result, list)
            assert len(result) == 2
            assert "–í–≤–µ–¥–µ–Ω–∏–µ" in result[0]
            assert "–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å" in result[1]
    
    @pytest.mark.asyncio
    async def test_generate_plan_insufficient_data(self, mock_context):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–ª–∞–Ω–∞ —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        mock_context.user_data = {
            "science_name": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
        }
        
        result = await generate_plan(mock_context)
        
        assert result == []
        mock_context.bot.send_message.assert_called()
    
    @pytest.mark.asyncio
    async def test_generate_text_empty_plan(self, mock_context):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ —Å –ø—É—Å—Ç—ã–º –ø–ª–∞–Ω–æ–º"""
        mock_context.user_data = {
            "science_name": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
            "work_type": "üìù –≠—Å—Å–µ",
            "work_theme": "–ò–Ω—Ç–µ–≥—Ä–∞–ª—ã", 
            "preferences": "–ù–∞—É—á–Ω—ã–π —Å—Ç–∏–ª—å"
        }
        
        result = await generate_text([], mock_context)
        
        assert result == ""
        mock_context.bot.send_message.assert_called()
    
    def test_page_limits(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–∏–º–∏—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∞–±–æ—Ç"""
        from bot import PAGE_LIMITS
        
        assert PAGE_LIMITS["–≠—Å—Å–µ"] == 10
        assert PAGE_LIMITS["–î–æ–∫–ª–∞–¥"] == 10
        assert PAGE_LIMITS["–†–µ—Ñ–µ—Ä–∞—Ç"] == 20
        assert PAGE_LIMITS["–ü—Ä–æ–µ–∫—Ç"] == 20
        assert PAGE_LIMITS["–ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞"] == 30
    
    @pytest.mark.asyncio
    async def test_create_payment_mock(self, mock_context):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ (–º–æ–∫-–≤–µ—Ä—Å–∏—è)"""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è callback query
        mock_query = Mock()
        mock_query.answer = AsyncMock()
        mock_query.edit_message_text = AsyncMock()
        mock_query.message = Mock()
        mock_query.message.chat = Mock()
        mock_query.message.chat.id = 67890
        
        mock_update = Mock()
        mock_update.callback_query = mock_query
        
        mock_context.user_data = {
            "work_type": "üìù –≠—Å—Å–µ",
            "work_theme": "–ò–Ω—Ç–µ–≥—Ä–∞–ª—ã",
            "price": 300,
            "receipt_customer": "test@example.com"
        }
        
        # –ú–æ–∫–∞–µ–º YooKassa Payment
        mock_payment = Mock()
        mock_payment.id = "test_payment_id"
        mock_payment.confirmation = Mock()
        mock_payment.confirmation.confirmation_url = "https://test.url"
        
        with patch('bot.Payment.create', return_value=mock_payment), \
             patch('bot.asyncio.create_task') as mock_create_task:
            
            from telegram.ext import ConversationHandler
            result = await create_payment(mock_update, mock_context)
            
            assert result == ConversationHandler.END
            assert mock_context.user_data["payment_id"] == "test_payment_id"
            mock_query.edit_message_text.assert_called_once()
            mock_create_task.assert_called_once()


class TestIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    
    @pytest.mark.asyncio
    async def test_full_order_flow_mock(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞ (–º–æ–∫-–≤–µ—Ä—Å–∏—è)"""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã
        mock_update = Mock(spec=Update)
        mock_update.effective_user = Mock(spec=User)
        mock_update.effective_user.id = 12345
        mock_update.message = Mock(spec=Message)
        mock_update.message.reply_text = AsyncMock()
        mock_update.message.chat = Mock(spec=Chat)
        mock_update.message.chat.id = 67890
        
        mock_context = Mock(spec=CallbackContext)
        mock_context.user_data = {}
        mock_context.bot = Mock()
        mock_context.bot.send_message = AsyncMock()
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º —á–µ—Ä–µ–∑ –≤—Å–µ —ç—Ç–∞–ø—ã –∑–∞–∫–∞–∑–∞
        with patch('bot.log_user_action'):
            # 1. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–∫–∞–∑
            result1 = await order(mock_update, mock_context)
            from bot import WORK_TYPE
            assert result1 == WORK_TYPE
            
            # 2. –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø —Ä–∞–±–æ—Ç—ã
            mock_update.message.text = "üìù –≠—Å—Å–µ - 300‚ÇΩ"
            result2 = await work_type_handler(mock_update, mock_context)
            from bot import SCIENCE_NAME
            assert result2 == SCIENCE_NAME
            
            # 3. –£–∫–∞–∑—ã–≤–∞–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É
            mock_update.message.text = "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
            result3 = await science_name_handler(mock_update, mock_context)
            from bot import PAGE_NUMBER
            assert result3 == PAGE_NUMBER
            
            # 4. –£–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            mock_update.message.text = "5"
            result4 = await page_number_handler(mock_update, mock_context)
            from bot import WORK_THEME
            assert result4 == WORK_THEME
            
            # 5. –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–º—É
            mock_update.message.text = "–ò–Ω—Ç–µ–≥—Ä–∞–ª—ã –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ"
            result5 = await work_theme_handler(mock_update, mock_context)
            from bot import PREFERENCES
            assert result5 == PREFERENCES
            
            # 6. –£–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            mock_update.message.text = "–ù–∞—É—á–Ω—ã–π —Å—Ç–∏–ª—å"
            result6 = await preferences_handler(mock_update, mock_context)
            from bot import CUSTOMER_CONTACT
            assert result6 == CUSTOMER_CONTACT
            
            # 7. –£–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
            mock_update.message.text = "test@example.com"
            result7 = await contact_handler(mock_update, mock_context)
            from bot import PAYMENT
            assert result7 == PAYMENT
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
            assert mock_context.user_data["work_type"] == "üìù –≠—Å—Å–µ"
            assert mock_context.user_data["price"] == 300
            assert mock_context.user_data["science_name"] == "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
            assert mock_context.user_data["page_number"] == 5
            assert mock_context.user_data["work_theme"] == "–ò–Ω—Ç–µ–≥—Ä–∞–ª—ã –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ"
            assert mock_context.user_data["preferences"] == "–ù–∞—É—á–Ω—ã–π —Å—Ç–∏–ª—å"
            assert mock_context.user_data["receipt_customer"] == "test@example.com"


def run_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–æ—Ç–∞ NinjaEssayAI...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    try:
        import pytest
        print("‚úÖ pytest –Ω–∞–π–¥–µ–Ω")
    except ImportError:
        print("‚ùå pytest –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pytest")
        return False
    
    try:
        import asyncio
        print("‚úÖ asyncio –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        print("‚ùå asyncio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    exit_code = pytest.main([
        __file__,
        "-v",
        "--tb=short",
        "-x"  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ
    ])
    
    if exit_code == 0:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return False


if __name__ == "__main__":
    run_tests()
