import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackContext, MessageHandler, filters, ConversationHandler
from openai import OpenAI
import docx
from docx.shared import Inches
from docx.enum.text import WD_ALIGN_PARAGRAPH
import logging
import json
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∏ —Ç–æ–∫–µ–Ω–æ–≤
TELEGRAM_BOT_TOKEN = "7860525094:AAGG6PHD1q728Fl5UIAybWFILWQgfvjDP8M"
DEEPSEEK_API_KEY = "sk-2fcca2e6cf50493ba7d67eb50e73516f"
DEEPSEEK_BASE_URL = "https://api.deepseek.com"

client = OpenAI(api_key=DEEPSEEK_API_KEY, base_url=DEEPSEEK_BASE_URL)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext) -> None:
    keyboard = [["/order", "/subscribe"], ["/help", "/cancel"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üëæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *NinjaEssayAI*! ü•∑\n\n"
        "‚ö° –ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –∑–∞ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–∏–Ω—É—Ç—ã! ‚ö°\n\n"
        "üñã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "üÜò *–ü–æ–º–æ—â—å* üÜò\n\n"
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "- üìã /order - –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\n"
        "- üí≥ /subscribe - –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏–∏\n"
        "- ‚ùå /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å\n"
        "- ‚ÑπÔ∏è /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏"
    )

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
WORK_TYPE, SCIENCE_NAME, PAGE_NUMBER, WORK_THEME, PREFERENCES, PAYMENT = range(6)

# –ù–∞—á–∞–ª–æ –∑–∞–∫–∞–∑–∞
async def order(update: Update, context: CallbackContext) -> int:
    keyboard = [
        ["üìù –≠—Å—Å–µ", "üìú –î–æ–∫–ª–∞–¥"],
        ["üìñ –†–µ—Ñ–µ—Ä–∞—Ç", "üíº –ü—Ä–æ–µ–∫—Ç"],
        ["üìö –ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("ü•∑ *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã:* ü•∑", reply_markup=reply_markup)
    return WORK_TYPE

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —ç—Ç–∞–ø–æ–≤ –∑–∞–∫–∞–∑–∞
async def work_type_handler(update: Update, context: CallbackContext) -> int:
    context.user_data["work_type"] = update.message.text
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É:\n1. –ù–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞):")
    return SCIENCE_NAME

async def science_name_handler(update: Update, context: CallbackContext) -> int:
    context.user_data["science_name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü:")
    return PAGE_NUMBER

async def page_number_handler(update: Update, context: CallbackContext) -> int:
    try:
        context.user_data["page_number"] = int(update.message.text)
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return PAGE_NUMBER
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —Ä–∞–±–æ—Ç—ã:")
    return WORK_THEME

async def work_theme_handler(update: Update, context: CallbackContext) -> int:
    context.user_data["work_theme"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:")
    return PREFERENCES

async def preferences_handler(update: Update, context: CallbackContext) -> int:
    context.user_data["preferences"] = update.message.text
    work_type = context.user_data["work_type"]
    price = 300 if work_type in ["üìù –≠—Å—Å–µ", "üìú –î–æ–∫–ª–∞–¥"] else 400 if work_type in ["üìñ –†–µ—Ñ–µ—Ä–∞—Ç", "üíº –ü—Ä–æ–µ–∫—Ç"] else 500
    await update.message.reply_text(
        f"üéØ *–í–∞—à –∑–∞–∫–∞–∑:* üéØ\n"
        f"üìå –¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type}\n"
        f"üìå –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {context.user_data['science_name']}\n"
        f"üìå –¢–µ–º–∞: {context.user_data['work_theme']}\n"
        f"üìå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {context.user_data['page_number']}\n"
        f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {price} —Ä—É–±–ª–µ–π\n\n"
        "‚úÖ –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –≤–≤–µ–¥–∏—Ç–µ /pay –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    return PAYMENT

async def payment_invalid(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /pay –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    return PAYMENT

async def cancel(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
async def pay(update: Update, context: CallbackContext) -> int:
    logging.info("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.")
    await update.message.reply_text("–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞! –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞
    logging.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ —Ä–∞–±–æ—Ç—ã.")
    plan_array = await generate_plan(context)
    context.user_data["plan_array"] = plan_array
    logging.info(f"–ü–ª–∞–Ω —Ä–∞–±–æ—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {plan_array}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    logging.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ –ø–ª–∞–Ω—É –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
    file_path = await generate_text(plan_array, context)
    logging.info(f"–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {file_path}")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with open(file_path, "rb") as file:
        await update.message.reply_document(file, filename=file_path)

    await update.message.reply_text("–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!")
    logging.info("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    return ConversationHandler.END

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞
async def generate_plan(context: CallbackContext) -> list:
    logging.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–ª–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ DeepSeek API.")
    
    science_name = context.user_data["science_name"]
    work_type = context.user_data["work_type"]
    work_theme = context.user_data["work_theme"]
    preferences = context.user_data["preferences"]
    page_number = context.user_data["page_number"]
    calls_number = max(1, page_number // 2)  # –ú–∏–Ω–∏–º—É–º 1 –ø—É–Ω–∫—Ç

    prompt = (
        f"–î–µ–π—Å—Ç–≤—É–π –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ {science_name}. "
        f"–°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –∏–∑ {calls_number} –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è {work_type} –ø–æ —Ç–µ–º–µ: {work_theme}. "
        f"–£—á—Ç–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {preferences}. "
        "–í–µ—Ä–Ω–∏ –ø–ª–∞–Ω –≤ –≤–∏–¥–µ JSON-–º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫ –∏–ª–∏ –≤ –≤–∏–¥–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."
    )

    response = client.chat.completions.create(
        model="deepseek-reasoner",
        messages=[
            {"role": "system", "content": "mode: plan_generation"},
            {"role": "user", "content": prompt}
        ],
        stream=False
    )
    logging.info("–û—Ç–≤–µ—Ç –æ—Ç DeepSeek API –ø–æ–ª—É—á–µ–Ω.")

    response_content = response.choices[0].message.content

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
        plan_array = json.loads(response_content)
        if not isinstance(plan_array, list):
            raise ValueError("–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º.")
    except (json.JSONDecodeError, ValueError):
        # –ï—Å–ª–∏ –Ω–µ JSON, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
        logging.info("–û—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç.")
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É–Ω–∫—Ç—ã, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ –æ–Ω–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        lines = response_content.splitlines()
        plan_array = [line.strip() for line in lines if line.strip()]
        # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1. –í–≤–µ–¥–µ–Ω–∏–µ" -> "–í–≤–µ–¥–µ–Ω–∏–µ")
        plan_array = [re.sub(r'^\d+\.\s*', '', item) for item in plan_array]

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–Ω–∫—Ç–æ–≤
    if len(plan_array) > calls_number:
        plan_array = plan_array[:calls_number]
    elif len(plan_array) < calls_number:
        plan_array.extend([f"–†–∞–∑–¥–µ–ª {i+1}" for i in range(len(plan_array), calls_number)])

    logging.info(f"–ò—Ç–æ–≥–æ–≤—ã–π –ø–ª–∞–Ω: {plan_array}")
    return plan_array

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
async def generate_text(plan_array, context: CallbackContext) -> str:
    logging.info("–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø–æ –≥–ª–∞–≤–∞–º –ø–ª–∞–Ω–∞.")
    science_name = context.user_data["science_name"]
    work_type = context.user_data["work_type"]
    work_theme = context.user_data["work_theme"]
    preferences = context.user_data["preferences"]

    if not plan_array:
        logging.error("–ü–ª–∞–Ω –ø—É—Å—Ç. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç.")
        await context.bot.send_message(
            chat_id=context._chat_id,
            text="–û—à–∏–±–∫–∞: –ü–ª–∞–Ω –ø—É—Å—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ DeepSeek –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–∞—Å—Å–∏–≤."
        )
        return ""

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    doc = docx.Document()
    section = doc.sections[0]
    section.top_margin = Inches(1)
    section.bottom_margin = Inches(1)
    section.left_margin = Inches(1)
    section.right_margin = Inches(1)

    heading = doc.add_heading(f"{work_type} –ø–æ —Ç–µ–º–µ: {work_theme}", level=1)
    heading.alignment = WD_ALIGN_PARAGRAPH.CENTER

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –ø–ª–∞–Ω–∞
    for chapter in plan_array:
        logging.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≥–ª–∞–≤—ã: {chapter}")
        prompt = (
            f"–î–µ–π—Å—Ç–≤—É–π –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ {science_name}, –Ω–∞–ø–∏—à–∏, —Å—Ç—Ä–æ–≥–æ —Å –æ–ø–æ—Ä–æ–π –Ω–∞ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, "
            f"–≥–ª–∞–≤—É: {chapter} –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è {work_type} –ø–æ —Ç–µ–º–µ: {work_theme} (–Ω–∞–ø–∏—à–∏ –Ω–µ –º–µ–Ω–µ–µ 600 —Å–ª–æ–≤) "
            f"(–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±—É–¥—É—Ç –∏–º–µ—Ç—å —Ä–∞–∑–Ω—É—é –¥–ª–∏–Ω—É, –∞ —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –∏–∑–±–µ–≥–∞—Ç—å—Å—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–¥–Ω–æ–∫–æ—Ä–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö) "
            f"{preferences}"
        )
        response = client.chat.completions.create(
            model="deepseek-reasoner",
            messages=[{"role": "user", "content": prompt}],
            stream=False
        )
        chapter_text = response.choices[0].message.content
        logging.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≥–ª–∞–≤—ã: {chapter_text[:100]}...")

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç
        doc.add_heading(chapter, level=2)
        doc.add_paragraph(chapter_text)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    file_path = f"{work_type}_{work_theme}.docx"
    doc.save(file_path)
    logging.info(f"–î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
    return file_path

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("order", order)],
        states={
            WORK_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, work_type_handler)],
            SCIENCE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, science_name_handler)],
            PAGE_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, page_number_handler)],
            WORK_THEME: [MessageHandler(filters.TEXT & ~filters.COMMAND, work_theme_handler)],
            PREFERENCES: [MessageHandler(filters.TEXT & ~filters.COMMAND, preferences_handler)],
            PAYMENT: [
                CommandHandler("pay", pay),
                CommandHandler("cancel", cancel),
                MessageHandler(filters.TEXT & ~filters.COMMAND, payment_invalid)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(conv_handler)

    application.run_polling()

if __name__ == "__main__":
    main()