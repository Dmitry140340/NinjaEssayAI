import os
import asyncio
import io
import sqlite3
import time
import csv
import sys
import logging
from collections import defaultdict
try:
    import psutil
except ImportError:
    psutil = None
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackContext, MessageHandler, filters, ConversationHandler, CallbackQueryHandler
from openai import AsyncOpenAI
import docx
from docx.shared import Pt, Cm
from docx.enum.text import WD_ALIGN_PARAGRAPH, WD_LINE_SPACING
from docx.enum.section import WD_SECTION
from docx.oxml.ns import qn
from docx.oxml import OxmlElement
import logging
import json
import re
import html
from dotenv import load_dotenv
from sqlalchemy import create_engine, Column, Integer, String, DateTime
from sqlalchemy.orm import sessionmaker, declarative_base  # Updated import for SQLAlchemy 2.0
from datetime import datetime, timezone, timedelta
import uuid
from yookassa import Configuration, Payment, Refund

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") 
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
DEEPSEEK_BASE_URL = "https://api.deepseek.com"
# –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è YooKassa —É–¥–∞–ª–µ–Ω—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID")
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY")

# üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ False –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ —Ä–µ–∂–∏–º–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏
TESTING_MODE = False

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞
ADMIN_IDS = [659874549]  # –í–∞—à Telegram ID –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä

# –°–∏—Å—Ç–µ–º–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ (rate limiting)
user_request_times = defaultdict(list)
MAX_REQUESTS_PER_HOUR = 5
REQUEST_WINDOW = 3600  # 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ YooKassa
Configuration.account_id = YOOKASSA_SHOP_ID or ""
Configuration.secret_key = YOOKASSA_SECRET_KEY or ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á DeepSeek –∑–∞–≥—Ä—É–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
if not DEEPSEEK_API_KEY:
    raise ValueError(
        "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DEEPSEEK_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. "
        "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á API."
    )
# –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ YooKassa –Ω–µ –∑–∞–¥–∞–Ω—ã
if not YOOKASSA_SHOP_ID or not YOOKASSA_SECRET_KEY:
    logging.warning(
        "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è YOOKASSA_SHOP_ID –∏–ª–∏ YOOKASSA_SECRET_KEY "
        "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ü–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ YooKassa –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å."
    )

client = AsyncOpenAI(api_key=DEEPSEEK_API_KEY, base_url=DEEPSEEK_BASE_URL)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –§—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
def sanitize_filename(text: str) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
    if not text:
        return "default"
    # –£–±–∏—Ä–∞–µ–º –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    safe_text = re.sub(r'[<>:"/\\|?*\x00-\x1f]', '_', text)
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    safe_text = safe_text[:50].strip()
    # –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ (—Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã/–ø–∞–ø–∫–∏)
    safe_text = safe_text.strip('.')
    return safe_text if safe_text else "default"

def validate_user_input(text: str, max_length: int = 1000) -> str:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    if not text:
        raise ValueError("–ü—É—Å—Ç–æ–π –≤–≤–æ–¥ –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è")
    if len(text) > max_length:
        raise ValueError(f"–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–º–∞–∫—Å–∏–º—É–º {max_length} —Å–∏–º–≤–æ–ª–æ–≤)")
    # –£–±–∏—Ä–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Ç–µ–≥–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML
    cleaned_text = html.escape(text.strip())
    if not cleaned_text:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ strip()
        raise ValueError("–ü—É—Å—Ç–æ–π –≤–≤–æ–¥ –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è")
    return cleaned_text

def validate_contact(contact: str) -> str:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    contact = validate_user_input(contact, 100)
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è email/—Ç–µ–ª–µ—Ñ–æ–Ω–∞
    pattern_email = re.compile(r"^[\w\.-]+@[\w\.-]+\.\w+$")
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, —Ç–∏—Ä–µ, –ø–ª—é—Å –≤ –Ω–∞—á–∞–ª–µ
    pattern_phone = re.compile(r"^\+?[0-9\s\-\(\)]{10,20}$")
    if not (pattern_email.match(contact) or pattern_phone.match(contact)):
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞")
    return contact

def get_chat_id(context: CallbackContext, update: Update = None) -> int:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ chat_id"""
    if hasattr(context, '_chat_id') and context._chat_id:
        return context._chat_id
    elif update and update.effective_chat:
        return update.effective_chat.id
    elif update and update.message:
        return update.message.chat_id
    else:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id")

def validate_generated_content(content: str, chapter: str) -> str:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑"""
    if not content or len(content.strip()) < 100:
        raise ValueError(f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≥–ª–∞–≤—ã {chapter}")
    
    # –£–¥–∞–ª—è–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã –≤ –Ω–∞—á–∞–ª–µ —Ç–µ–∫—Å—Ç–∞
    unwanted_patterns = [
        r'^[^.]*–æ—Ç–ª–∏—á–Ω–æ[^.]*\.',
        r'^[^.]*–≤–æ—Ç –ø–ª–∞–Ω[^.]*\.',
        r'^[^.]*—Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º[^.]*\.',
        r'^[^.]*–≤–æ—Ç —Ç–µ–∫—Å—Ç[^.]*\.',
        r'^[^.]*–∏—Ç–∞–∫[^.]*\.',
        r'^[^.]*—Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Å —É—á–µ—Ç–æ–º[^.]*\.',
        r'^[^.]*–ø–ª–∞–Ω .* –ø–æ —Ç–µ–º–µ[^.]*\.',
    ]
    
    content_cleaned = content.strip()
    
    # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    for pattern in unwanted_patterns:
        content_cleaned = re.sub(pattern, '', content_cleaned, flags=re.IGNORECASE)
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã –≤ –Ω–∞—á–∞–ª–µ
    content_cleaned = content_cleaned.lstrip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if len(content_cleaned.strip()) < 200:
        logging.warning(f"–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≥–ª–∞–≤—ã {chapter} —Å—Ç–∞–ª —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏")
        return content.strip()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
    
    return content_cleaned

# –§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

def check_rate_limit(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    current_time = time.time()
    user_times = user_request_times[user_id]
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –æ–∫–Ω–∞
    user_times[:] = [t for t in user_times if current_time - t < REQUEST_WINDOW]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if len(user_times) >= MAX_REQUESTS_PER_HOUR:
        return False
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
    user_times.append(current_time)
    return True

async def admin_stats(update: Update, context: CallbackContext) -> None:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        session = SessionLocal()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_actions = session.query(UserAction).count()
        unique_users = session.query(UserAction.user_id).distinct().count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
        start_commands = session.query(UserAction).filter(UserAction.action == "start_command").count()
        order_commands = session.query(UserAction).filter(UserAction.action == "order_command").count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        day_ago = datetime.now(timezone.utc) - timedelta(hours=24)
        recent_actions = session.query(UserAction).filter(UserAction.timestamp > day_ago).count()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        week_ago = datetime.now(timezone.utc) - timedelta(days=7)
        week_actions = session.query(UserAction).filter(UserAction.timestamp > week_ago).count()
        
        # –¢–æ–ø-3 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        from sqlalchemy import func
        top_actions = session.query(
            UserAction.action,
            func.count(UserAction.id).label('count')
        ).group_by(UserAction.action).order_by(func.count(UserAction.id).desc()).limit(3).all()
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        from sqlalchemy import extract
        today_weekday = datetime.now().weekday()
        today_actions = session.query(UserAction).filter(
            extract('dow', UserAction.timestamp) == today_weekday,
            UserAction.timestamp > day_ago
        ).count()
        
        # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
        new_users_week = session.query(UserAction.user_id).filter(
            UserAction.timestamp > week_ago
        ).distinct().count()
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–¥–µ–π—Å—Ç–≤–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        active_users_week = session.query(UserAction.user_id).filter(
            UserAction.timestamp > week_ago
        ).distinct().count()
        
        # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        avg_actions_per_user = total_actions / unique_users if unique_users > 0 else 0
        
        # === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò ===
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        total_orders = session.query(Order).count()
        paid_orders = session.query(Order).filter(Order.status == "paid").count()
        completed_orders = session.query(Order).filter(Order.status == "completed").count()
        failed_orders = session.query(Order).filter(Order.status == "failed").count()
        
        # –ó–∞–∫–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –∏ –Ω–µ–¥–µ–ª—é
        recent_orders = session.query(Order).filter(Order.created_at > day_ago).count()
        week_orders = session.query(Order).filter(Order.created_at > week_ago).count()
        
        # –ö–æ–Ω–≤–µ—Ä—Å–∏—è (% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–¥–µ–ª–∞–≤—à–∏—Ö –∑–∞–∫–∞–∑)
        users_with_orders = session.query(Order.user_id).distinct().count()
        conversion_rate = (users_with_orders / unique_users * 100) if unique_users > 0 else 0
        
        # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
        from sqlalchemy import func
        avg_order_price = session.query(func.avg(Order.price)).scalar() or 0
        
        # –î–æ—Ö–æ–¥—ã
        total_revenue = session.query(func.sum(Order.price)).filter(Order.status.in_(["paid", "completed"])).scalar() or 0
        week_revenue = session.query(func.sum(Order.price)).filter(
            Order.status.in_(["paid", "completed"]),
            Order.created_at > week_ago
        ).scalar() or 0
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∏–ø—ã —Ä–∞–±–æ—Ç
        popular_works = session.query(
            Order.work_type,
            func.count(Order.id).label('count')
        ).group_by(Order.work_type).order_by(func.count(Order.id).desc()).limit(3).all()
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        popular_subjects = session.query(
            Order.science_name,
            func.count(Order.id).label('count')
        ).group_by(Order.science_name).order_by(func.count(Order.id).desc()).limit(3).all()
        
        # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤)
        completed_orders_with_time = session.query(Order).filter(
            Order.status == "completed",
            Order.completed_at.isnot(None)
        ).all()
        
        if completed_orders_with_time:
            completion_times = [
                (order.completed_at - order.created_at).total_seconds() / 3600  # –≤ —á–∞—Å–∞—Ö
                for order in completed_orders_with_time
            ]
            avg_completion_time = sum(completion_times) / len(completion_times)
        else:
            avg_completion_time = 0
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º (—Ç–æ–ø-3 —á–∞—Å–∞)
        from sqlalchemy import extract
        hourly_activity = session.query(
            extract('hour', UserAction.timestamp).label('hour'),
            func.count(UserAction.id).label('count')
        ).filter(UserAction.timestamp > day_ago).group_by(
            extract('hour', UserAction.timestamp)
        ).order_by(func.count(UserAction.id).desc()).limit(3).all()
        
        # Retention: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –≤–µ—Ä–Ω—É–≤—à–∏–µ—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è
        first_actions = session.query(
            UserAction.user_id,
            func.min(UserAction.timestamp).label('first_action')
        ).group_by(UserAction.user_id).subquery()
        
        returning_users = session.query(UserAction.user_id).join(
            first_actions, UserAction.user_id == first_actions.c.user_id
        ).filter(
            UserAction.timestamp > first_actions.c.first_action + timedelta(days=1)
        ).distinct().count()
        
        retention_rate = (returning_users / unique_users * 100) if unique_users > 0 else 0
        
        stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**

üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}
üìù –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {total_actions}
üöÄ –ö–æ–º–∞–Ω–¥ /start: {start_commands}
üìã –ö–æ–º–∞–Ω–¥ /order: {order_commands}
üìà –°—Ä–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–π/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {avg_actions_per_user:.1f}
üîÑ Retention rate: {retention_rate:.1f}%

üí∞ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:**
üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}
‚úÖ –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö: {paid_orders}
üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {completed_orders}
‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_orders}
üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {conversion_rate:.1f}%
üíµ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_order_price:.0f} —Ä—É–±.
üí∏ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_revenue:.0f} —Ä—É–±.

‚è∞ **–í—Ä–µ–º–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:**
üïê –î–µ–π—Å—Ç–≤–∏–π –∑–∞ 24 —á–∞—Å–∞: {recent_actions}
üìÖ –î–µ–π—Å—Ç–≤–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: {week_actions}
üÜï –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: {new_users_week}
üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: {active_users_week}
üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è: {today_actions}
üõí –ó–∞–∫–∞–∑–æ–≤ –∑–∞ 24 —á–∞—Å–∞: {recent_orders}
üìã –ó–∞–∫–∞–∑–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {week_orders}
üí∞ –î–æ—Ö–æ–¥ –∑–∞ –Ω–µ–¥–µ–ª—é: {week_revenue:.0f} —Ä—É–±.
‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {avg_completion_time:.1f} —á.

üéØ **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**"""
        
        for action, count in top_actions:
            stats_text += f"\n‚Ä¢ {action}: {count}"
        
        stats_text += f"""

üìä **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∏–ø—ã —Ä–∞–±–æ—Ç:**"""
        for work_type, count in popular_works:
            stats_text += f"\n‚Ä¢ {work_type}: {count}"
            
        stats_text += f"""

üéì **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:**"""
        for subject, count in popular_subjects:
            stats_text += f"\n‚Ä¢ {subject}: {count}"
            
        stats_text += f"""

üïê **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º (—Ç–æ–ø-3):**"""
        for hour, count in hourly_activity:
            stats_text += f"\n‚Ä¢ {int(hour)}:00 - {count} –¥–µ–π—Å—Ç–≤–∏–π"
        
        stats_text += f"""

‚ö° **–°–∏—Å—Ç–µ–º–∞:**
üîí –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(ADMIN_IDS)}
üõ°Ô∏è Rate limiting: {MAX_REQUESTS_PER_HOUR} req/hour
üéØ –°–µ–º–∞—Ñ–æ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: 10 —Å–ª–æ—Ç–æ–≤ (—Å–≤–æ–±–æ–¥–Ω–æ: {GENERATION_SEMAPHORE._value})
üïê Rate limit –∑–∞–ø–∏—Å–µ–π: {len(user_request_times)}
        """
        
        await update.message.reply_text(stats_text, parse_mode='Markdown')
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    finally:
        session.close()

async def admin_users(update: Update, context: CallbackContext) -> None:
    """–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        session = SessionLocal()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        from sqlalchemy import func, desc
        top_users = session.query(
            UserAction.user_id,
            func.count(UserAction.id).label('action_count'),
            func.max(UserAction.timestamp).label('last_activity')
        ).group_by(UserAction.user_id)\
         .order_by(desc('action_count'))\
         .limit(10).all()
        
        users_text = "üë• **–¢–æ–ø-10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n"
        for user_id, action_count, last_activity in top_users:
            users_text += f"‚Ä¢ User ID: {user_id}\n"
            users_text += f"  üìù –î–µ–π—Å—Ç–≤–∏–π: {action_count}\n"
            users_text += f"  üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity.strftime('%Y-%m-%d %H:%M')}\n\n"
        
        await update.message.reply_text(users_text, parse_mode='Markdown')
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    finally:
        session.close()

async def admin_broadcast(update: Update, context: CallbackContext) -> None:
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    if not context.args:
        await update.message.reply_text(
            "üì¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ>\n\n"
            "–ü—Ä–∏–º–µ—Ä: /broadcast –ü—Ä–∏–≤–µ—Ç! –£ –Ω–∞—Å –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!"
        )
        return
    
    message = ' '.join(context.args)
    
    try:
        session = SessionLocal()
        
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        unique_users = session.query(UserAction.user_id).distinct().all()
        user_ids = [user[0] for user in unique_users]
        
        success_count = 0
        error_count = 0
        
        await update.message.reply_text(f"üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        for user_id in user_ids:
            try:
                await context.bot.send_message(chat_id=int(user_id), text=message)
                success_count += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ Telegram API
                await asyncio.sleep(0.1)
                
            except Exception as e:
                error_count += 1
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        result_text = f"""
‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**

üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}
‚ùå –û—à–∏–±–æ–∫: {error_count}
üìä –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {len(user_ids)}
        """
        
        await update.message.reply_text(result_text, parse_mode='Markdown')
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")
    finally:
        session.close()

async def admin_system(update: Update, context: CallbackContext) -> None:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        import psutil
        import sys
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Python –ø—Ä–æ—Ü–µ—Å—Å–µ
        process = psutil.Process()
        bot_memory = process.memory_info().rss / 1024 / 1024  # MB
        
        system_text = f"""
üñ•Ô∏è **–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**

üíª CPU: {cpu_percent}%
üß† RAM: {memory.percent}% ({memory.used // 1024 // 1024} MB / {memory.total // 1024 // 1024} MB)
üíæ –î–∏—Å–∫: {disk.percent}% ({disk.used // 1024 // 1024 // 1024} GB / {disk.total // 1024 // 1024 // 1024} GB)

ü§ñ **–ë–æ—Ç:**
üìä –ü–∞–º—è—Ç—å –±–æ—Ç–∞: {bot_memory:.1f} MB
üêç Python: {sys.version.split()[0]}
‚ö° –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {10 - GENERATION_SEMAPHORE._value}
üïê Rate limit –∑–∞–ø–∏—Å–µ–π: {len(user_request_times)}
        """
        
        await update.message.reply_text(system_text, parse_mode='Markdown')
        
    except ImportError:
        await update.message.reply_text(
            "üìã **–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n\n"
            "‚ö° –°–µ–º–∞—Ñ–æ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –¥–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ—Ç–æ–≤ " + str(GENERATION_SEMAPHORE._value) + "/10\n"
            "üïê Rate limit –∑–∞–ø–∏—Å–µ–π: " + str(len(user_request_times)) + "\n\n"
            "‚ÑπÔ∏è –î–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install psutil"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

async def admin_orders(update: Update, context: CallbackContext) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        session = SessionLocal()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º
        from sqlalchemy import func, desc
        
        total_orders = session.query(Order).count()
        completed_orders = session.query(Order).filter(Order.status == "completed").count()
        failed_orders = session.query(Order).filter(Order.status == "failed").count()
        refunded_orders = session.query(Order).filter(Order.status == "refunded").count()
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã
        recent_orders = session.query(Order)\
            .order_by(desc(Order.created_at))\
            .limit(5).all()
        
        # –î–æ—Ö–æ–¥—ã
        total_revenue = session.query(func.sum(Order.price))\
            .filter(Order.status == "completed").scalar() or 0
        
        orders_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:**

üìù –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_orders}
‚ùå –û—à–∏–±–∫–∏: {failed_orders}
üí∏ –í–æ–∑–≤—Ä–∞—Ç—ã: {refunded_orders}
üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_revenue}‚ÇΩ

üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:**

        """
        
        for order in recent_orders:
            status_emoji = {
                "created": "üÜï",
                "paid": "üí≥",
                "completed": "‚úÖ",
                "failed": "‚ùå",
                "refunded": "üí∏",
                "cancelled": "üö´"
            }.get(order.status, "‚ùì")
            
            orders_text += f"""
{status_emoji} ID: {order.id} | {order.work_type}
üí∞ {order.price}‚ÇΩ | üë§ {order.user_id}
üìö {order.science_name} - {order.work_theme[:30]}...
üïê {order.created_at.strftime('%d.%m %H:%M')}

"""
        
        await update.message.reply_text(orders_text, parse_mode='Markdown')
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
    finally:
        session.close()

async def admin_finance(update: Update, context: CallbackContext) -> None:
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        session = SessionLocal()
        from sqlalchemy import func, desc
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        now = datetime.now(timezone.utc)
        today = now.replace(hour=0, minute=0, second=0, microsecond=0)
        yesterday = today - timedelta(days=1)
        week_ago = now - timedelta(days=7)
        month_ago = now - timedelta(days=30)
        
        # –î–æ—Ö–æ–¥—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        today_revenue = session.query(func.sum(Order.price)).filter(
            Order.status.in_(["paid", "completed"]),
            Order.created_at >= today
        ).scalar() or 0
        
        yesterday_revenue = session.query(func.sum(Order.price)).filter(
            Order.status.in_(["paid", "completed"]),
            Order.created_at >= yesterday,
            Order.created_at < today
        ).scalar() or 0
        
        week_revenue = session.query(func.sum(Order.price)).filter(
            Order.status.in_(["paid", "completed"]),
            Order.created_at >= week_ago
        ).scalar() or 0
        
        month_revenue = session.query(func.sum(Order.price)).filter(
            Order.status.in_(["paid", "completed"]),
            Order.created_at >= month_ago
        ).scalar() or 0
        
        # –ó–∞–∫–∞–∑—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        today_orders = session.query(Order).filter(Order.created_at >= today).count()
        yesterday_orders = session.query(Order).filter(
            Order.created_at >= yesterday,
            Order.created_at < today
        ).count()
        
        # –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        today_avg = today_revenue / today_orders if today_orders > 0 else 0
        yesterday_avg = yesterday_revenue / yesterday_orders if yesterday_orders > 0 else 0
        
        # –¢–æ–ø-5 —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –∑–∞–∫–∞–∑–æ–≤
        expensive_orders = session.query(Order).filter(
            Order.status.in_(["paid", "completed"])
        ).order_by(desc(Order.price)).limit(5).all()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ä–∞–±–æ—Ç (–¥–æ—Ö–æ–¥—ã)
        work_revenue = session.query(
            Order.work_type,
            func.sum(Order.price).label('revenue'),
            func.count(Order.id).label('count')
        ).filter(
            Order.status.in_(["paid", "completed"])
        ).group_by(Order.work_type).order_by(desc('revenue')).limit(5).all()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        weekday_stats = session.query(
            func.extract('dow', Order.created_at).label('weekday'),
            func.sum(Order.price).label('revenue'),
            func.count(Order.id).label('count')
        ).filter(
            Order.status.in_(["paid", "completed"]),
            Order.created_at >= week_ago
        ).group_by(func.extract('dow', Order.created_at)).all()
        
        # –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤–æ—Ä–æ–Ω–∫–∏
        total_users = session.query(UserAction.user_id).distinct().count()
        order_users = session.query(Order.user_id).distinct().count()
        paid_users = session.query(Order.user_id).filter(
            Order.status.in_(["paid", "completed"])
        ).distinct().count()
        
        conversion_to_order = (order_users / total_users * 100) if total_users > 0 else 0
        conversion_to_payment = (paid_users / order_users * 100) if order_users > 0 else 0
        
        # –í–æ–∑–≤—Ä–∞—Ç—ã –∏ –æ—Ç–º–µ–Ω—ã
        refunds = session.query(Order).filter(Order.status == "refunded").count()
        failed_orders = session.query(Order).filter(Order.status == "failed").count()
        
        finance_text = f"""
üí∞ **–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:**

üìä **–î–æ—Ö–æ–¥—ã:**
üí∏ –°–µ–≥–æ–¥–Ω—è: {today_revenue:.0f} —Ä—É–±. ({today_orders} –∑–∞–∫–∞–∑–æ–≤)
üìÖ –í—á–µ—Ä–∞: {yesterday_revenue:.0f} —Ä—É–±. ({yesterday_orders} –∑–∞–∫–∞–∑–æ–≤)
üìà –ó–∞ –Ω–µ–¥–µ–ª—é: {week_revenue:.0f} —Ä—É–±.
üìä –ó–∞ –º–µ—Å—è—Ü: {month_revenue:.0f} —Ä—É–±.

üíµ **–°—Ä–µ–¥–Ω–∏–π —á–µ–∫:**
üî• –°–µ–≥–æ–¥–Ω—è: {today_avg:.0f} —Ä—É–±.
üìä –í—á–µ—Ä–∞: {yesterday_avg:.0f} —Ä—É–±.

üéØ **–ö–æ–Ω–≤–µ—Ä—Å–∏—è:**
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üìù –°–æ–∑–¥–∞–ª–∏ –∑–∞–∫–∞–∑: {order_users} ({conversion_to_order:.1f}%)
üí≥ –û–ø–ª–∞—Ç–∏–ª–∏: {paid_users} ({conversion_to_payment:.1f}%)

üî• **–¢–æ–ø-5 –¥–æ—Ä–æ–≥–∏—Ö –∑–∞–∫–∞–∑–æ–≤:**"""
        
        for order in expensive_orders:
            finance_text += f"\nüí∞ {order.price}‚ÇΩ - {order.work_type} ({order.science_name})"
        
        finance_text += f"""

üìä **–î–æ—Ö–æ–¥—ã –ø–æ —Ç–∏–ø–∞–º —Ä–∞–±–æ—Ç:**"""
        for work_type, revenue, count in work_revenue:
            finance_text += f"\n‚Ä¢ {work_type}: {revenue:.0f}‚ÇΩ ({count} –∑–∞–∫–∞–∑–æ–≤)"
        
        finance_text += f"""

üìÖ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:**"""
        weekdays = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
        for weekday, revenue, count in weekday_stats:
            day_name = weekdays[int(weekday) - 1] if weekday and weekday > 0 else "–ù–µ–∏–∑–≤"
            finance_text += f"\n‚Ä¢ {day_name}: {revenue:.0f}‚ÇΩ ({count} –∑–∞–∫–∞–∑–æ–≤)"
        
        finance_text += f"""

‚ö†Ô∏è **–ü—Ä–æ–±–ª–µ–º—ã:**
üî¥ –í–æ–∑–≤—Ä–∞—Ç—ã: {refunds}
‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã: {failed_orders}
        """
        
        await update.message.reply_text(finance_text, parse_mode='Markdown')
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
    finally:
        session.close()

async def admin_export(update: Update, context: CallbackContext) -> None:
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        session = SessionLocal()
        import csv
        from io import StringIO
        
        # –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤
        orders = session.query(Order).all()
        
        # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
        csv_buffer = StringIO()
        writer = csv.writer(csv_buffer)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow([
            'ID', 'User ID', 'Work Type', 'Science Name', 'Theme', 
            'Pages', 'Price', 'Status', 'Created At', 'Completed At'
        ])
        
        # –î–∞–Ω–Ω—ã–µ
        for order in orders:
            writer.writerow([
                order.id,
                order.user_id,
                order.work_type,
                order.science_name,
                order.work_theme,
                order.page_number,
                order.price,
                order.status,
                order.created_at.strftime('%Y-%m-%d %H:%M:%S'),
                order.completed_at.strftime('%Y-%m-%d %H:%M:%S') if order.completed_at else ''
            ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        csv_content = csv_buffer.getvalue().encode('utf-8')
        await update.message.reply_document(
            document=io.BytesIO(csv_content),
            filename=f"orders_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ CSV"
        )
        
        # –≠–∫—Å–ø–æ—Ä—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        actions = session.query(UserAction).all()
        
        actions_csv_buffer = StringIO()
        actions_writer = csv.writer(actions_csv_buffer)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        actions_writer.writerow(['ID', 'User ID', 'Action', 'Timestamp'])
        
        # –î–∞–Ω–Ω—ã–µ
        for action in actions:
            actions_writer.writerow([
                action.id,
                action.user_id,
                action.action,
                action.timestamp.strftime('%Y-%m-%d %H:%M:%S')
            ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        actions_csv_content = actions_csv_buffer.getvalue().encode('utf-8')
        await update.message.reply_document(
            document=io.BytesIO(actions_csv_content),
            filename=f"user_actions_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV"
        )
        
        await update.message.reply_text("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")
    finally:
        session.close()

async def admin_monitor(update: Update, context: CallbackContext) -> None:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        session = SessionLocal()
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
        last_5_min = datetime.now(timezone.utc) - timedelta(minutes=5)
        recent_activity = session.query(UserAction).filter(
            UserAction.timestamp > last_5_min
        ).count()
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        active_generations = 10 - GENERATION_SEMAPHORE._value
        
        # –ó–∞–∫–∞–∑—ã –≤ –æ—á–µ—Ä–µ–¥–∏ (created —Å—Ç–∞—Ç—É—Å)
        pending_orders = session.query(Order).filter(Order.status == "created").count()
        
        # –ù–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        last_hour = datetime.now(timezone.utc) - timedelta(hours=1)
        failed_recent = session.query(Order).filter(
            Order.status == "failed",
            Order.created_at > last_hour
        ).count()
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        try:
            import psutil
            cpu_percent = psutil.cpu_percent(interval=1)
            memory_percent = psutil.virtual_memory().percent
            system_status = f"üíª CPU: {cpu_percent}% | üß† RAM: {memory_percent}%"
        except ImportError:
            system_status = "üìä –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        
        # –°—Ç–∞—Ç—É—Å —Å–µ–º–∞—Ñ–æ—Ä–∞
        semaphore_status = "üü¢ –ù–æ—Ä–º–∞" if active_generations < 8 else "üü° –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞" if active_generations < 10 else "üî¥ –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞"
        
        # –ê–ª–µ—Ä—Ç—ã
        alerts = []
        if failed_recent > 5:
            alerts.append("üö® –ú–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —á–∞—Å")
        if active_generations >= 9:
            alerts.append("‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        if pending_orders > 10:
            alerts.append("üìã –ú–Ω–æ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏")
        
        monitor_text = f"""
üîç **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã:**

‚ö° **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
üïê –î–µ–π—Å—Ç–≤–∏–π –∑–∞ 5 –º–∏–Ω: {recent_activity}
üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {active_generations}/10
üìã –ó–∞–∫–∞–∑–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {pending_orders}
‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤/—á–∞—Å: {failed_recent}

üñ•Ô∏è **–°–∏—Å—Ç–µ–º–∞:**
{system_status}
üéØ –°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {semaphore_status}

üö® **–ê–ª–µ—Ä—Ç—ã:**"""
        
        if alerts:
            for alert in alerts:
                monitor_text += f"\n{alert}"
        else:
            monitor_text += "\n‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
        
        monitor_text += f"""

üìä **–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
/admin_stats - –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/admin_finance - –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
/admin_system - –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        """
        
        await update.message.reply_text(monitor_text, parse_mode='Markdown')
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    finally:
        session.close()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = "sqlite:///user_activity.db"
Base = declarative_base()  # Updated to use sqlalchemy.orm.declarative_base
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class UserAction(Base):
    __tablename__ = "user_actions"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(String, index=True)
    action = Column(String, index=True)
    timestamp = Column(DateTime, default=lambda: datetime.now(timezone.utc))

# –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
class Order(Base):
    __tablename__ = "orders"
    
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(String, index=True)
    work_type = Column(String)
    science_name = Column(String)
    work_theme = Column(String)
    page_number = Column(Integer)
    price = Column(Integer)
    status = Column(String, default="created")  # created, paid, completed, failed, refunded
    payment_id = Column(String, nullable=True)
    created_at = Column(DateTime, default=lambda: datetime.now(timezone.utc))
    completed_at = Column(DateTime, nullable=True)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
Base.metadata.create_all(bind=engine)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def log_user_action(user_id: str, action: str):
    session = SessionLocal()
    try:
        user_action = UserAction(
            user_id=str(user_id), 
            action=action,
            timestamp=datetime.now(timezone.utc)  # –ó–∞–º–µ–Ω–∏—Ç—å deprecated utcnow()
        )
        session.add(user_action)
        session.commit()
        logging.info(f"User action logged: {action} for user {user_id}")
    except Exception as e:
        session.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        raise
    finally:
        session.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
async def create_order(user_id: str, order_data: dict) -> int:
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –∑–∞–∫–∞–∑–∞"""
    session = SessionLocal()
    try:
        order = Order(
            user_id=str(user_id),
            work_type=order_data.get("work_type", ""),
            science_name=order_data.get("science_name", ""),
            work_theme=order_data.get("work_theme", ""),
            page_number=order_data.get("page_number", 0),
            price=order_data.get("price", 0),
            status="created"
        )
        session.add(order)
        session.commit()
        order_id = order.id
        logging.info(f"Order created: {order_id} for user {user_id}")
        return order_id
    except Exception as e:
        session.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        raise
    finally:
        session.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
async def update_order_status(order_id: int, status: str, payment_id: str = None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"""
    session = SessionLocal()
    try:
        order = session.query(Order).filter(Order.id == order_id).first()
        if order:
            order.status = status
            if payment_id:
                order.payment_id = payment_id
            if status == "completed":
                order.completed_at = datetime.now(timezone.utc)
            session.commit()
            logging.info(f"Order {order_id} status updated to {status}")
    except Exception as e:
        session.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: {e}")
        raise
    finally:
        session.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    await log_user_action(user_id, "start_command")
    # Show user agreement before displaying menu
    keyboard = [["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    mode_text = ""
    if TESTING_MODE:
        mode_text = "\nüß™ *–í–ù–ò–ú–ê–ù–ò–ï: –ë–û–¢ –í –¢–ï–°–¢–û–í–û–ú –†–ï–ñ–ò–ú–ï* üß™\n" \
                   "–í—Å–µ –∑–∞–∫–∞–∑—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ë–ï–°–ü–õ–ê–¢–ù–û –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!\n\n"
    
    await update.message.reply_text(
        "üëæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *NinjaEssayAI*! ü•∑\n\n"
        f"{mode_text}"
        "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º:\n"
        "https://docs.google.com/document/d/100ljVD3fFveH3Vuz7Y6F9QfFj5EsdOBymdRDRAMe2MI/edit?tab=t.0\n\n"
        "–ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å\", –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º.",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "üÜò *–ü–æ–º–æ—â—å* üÜò\n\n"
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "- üìã /order - –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\n"
        "- ‚ùå /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å\n"
        "- ‚ÑπÔ∏è /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏"
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /menu –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –¥–∏–∞–ª–æ–≥–∞
async def menu(update: Update, context: CallbackContext) -> None:
    keyboard = [["/order"], ["/help", "/cancel"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üìã *–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥:* üìã\n\n"
        "- /order - –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\n"
        "- /help - –ü–æ–º–æ—â—å\n"
        "- /cancel - –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞",
        reply_markup=reply_markup
    )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
async def continue_handler(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    await log_user_action(user_id, "accepted_terms")
    keyboard = [["/order"], ["/help", "/cancel"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üìã *–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥:* üìã\n\n"
        "- /order - –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\n"
        "- /help - –ü–æ–º–æ—â—å\n"
        "- /cancel - –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞",
        reply_markup=reply_markup
    )

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
WORK_TYPE, SCIENCE_NAME, PAGE_NUMBER, WORK_THEME, CUSTOM_PLAN, PREFERENCES, PAYMENT = range(7)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
def create_keyboard_with_back(options, show_back=True):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'"""
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if options:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
        if isinstance(options[0], list):
            keyboard.extend(options)
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2
            for i in range(0, len(options), 2):
                row = options[i:i+2]
                keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if show_back:
        keyboard.append(["‚óÄÔ∏è –ù–∞–∑–∞–¥"])
    
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
async def go_back_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥"""
    current_step = context.user_data.get("current_step", WORK_TYPE)
    
    if current_step == WORK_TYPE:
        await update.message.reply_text("–í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞.")
        return await order(update, context)
    elif current_step == SCIENCE_NAME:
        return await order(update, context)
    elif current_step == PAGE_NUMBER:
        return await science_name_back(update, context)
    elif current_step == WORK_THEME:
        return await page_number_back(update, context)
    elif current_step == CUSTOM_PLAN:
        return await work_theme_back(update, context)
    elif current_step == PREFERENCES:
        # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ (CUSTOM_PLAN), –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–∏–ø–∞ –ø–ª–∞–Ω–∞
        return await custom_plan_back(update, context)
    elif current_step == PAYMENT:
        return await preferences_back(update, context)
    
    return WORK_TYPE

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏

async def science_name_back(update: Update, context: CallbackContext) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã"""
    keyboard = create_keyboard_with_back([
        ["üìù –≠—Å—Å–µ - 300‚ÇΩ", "üìú –î–æ–∫–ª–∞–¥ - 300‚ÇΩ"],
        ["üìñ –†–µ—Ñ–µ—Ä–∞—Ç - 400‚ÇΩ", "üíº –ü—Ä–æ–µ–∫—Ç - 400‚ÇΩ"],
        ["üìö –ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ - 500‚ÇΩ"],
        ["üéì –î–∏–ø–ª–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞ - 800‚ÇΩ"]
    ], show_back=False)
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("ü•∑ *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã:* ü•∑", reply_markup=reply_markup)
    context.user_data["current_step"] = WORK_TYPE
    return WORK_TYPE

async def page_number_back(update: Update, context: CallbackContext) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"""
    keyboard = create_keyboard_with_back([], show_back=True)
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "üìù –®–∞–≥ 1/6: –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞):",
        reply_markup=reply_markup
    )
    context.user_data["current_step"] = SCIENCE_NAME
    return SCIENCE_NAME

async def work_theme_back(update: Update, context: CallbackContext) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü"""
    work_type = context.user_data.get("work_type", "")
    clean_type = re.sub(r"[^–ê-–Ø–∞-—è–Å—ë ]", "", work_type).strip()
    max_pages = PAGE_LIMITS.get(clean_type, 10)
    
    keyboard = create_keyboard_with_back([], show_back=True)
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        f"üìù –®–∞–≥ 2/6: –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü (–º–∞–∫—Å–∏–º—É–º {max_pages}):",
        reply_markup=reply_markup
    )
    context.user_data["current_step"] = PAGE_NUMBER
    return PAGE_NUMBER

async def custom_plan_back(update: Update, context: CallbackContext) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É —Ç–µ–º—ã —Ä–∞–±–æ—Ç—ã"""
    keyboard = create_keyboard_with_back([], show_back=True)
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "üìù –®–∞–≥ 3/6: –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É —Ä–∞–±–æ—Ç—ã:",
        reply_markup=reply_markup
    )
    context.user_data["current_step"] = WORK_THEME
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞–Ω–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
    context.user_data.pop("plan_entered", None)
    context.user_data.pop("custom_plan", None)
    context.user_data.pop("use_custom_plan", None)
    return WORK_THEME

async def preferences_back(update: Update, context: CallbackContext) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –ø–ª–∞–Ω–∞"""
    keyboard = create_keyboard_with_back([
        ["ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω"],
        ["‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ø–ª–∞–Ω"]
    ], show_back=True)
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "üìù –®–∞–≥ 4/6: –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ —Ä–∞–±–æ—Ç—ã:",
        reply_markup=reply_markup
    )
    context.user_data["current_step"] = CUSTOM_PLAN
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞–Ω–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
    context.user_data.pop("plan_entered", None)
    context.user_data.pop("custom_plan", None)
    context.user_data.pop("use_custom_plan", None)
    context.user_data.pop("preferences", None)
    return CUSTOM_PLAN

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ —Ç–∏–ø–∞–º —Ä–∞–±–æ—Ç—ã
PAGE_LIMITS = {"–≠—Å—Å–µ": 10, "–î–æ–∫–ª–∞–¥": 10, "–†–µ—Ñ–µ—Ä–∞—Ç": 20, "–ü—Ä–æ–µ–∫—Ç": 20, "–ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞": 30, "–î–∏–ø–ª–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞": 70}
# –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ DeepSeek API
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–º–∞—Ñ–æ—Ä–∞:
# 5 - –¥–ª—è –º–∞–ª–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ (1-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
# 10 - –¥–ª—è —Å—Ä–µ–¥–Ω–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏ (10-50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π) [—Ç–µ–∫—É—â–∞—è]
# 20 - –¥–ª—è –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ (50+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
# 30 - –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ (100+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
GENERATION_SEMAPHORE = asyncio.Semaphore(10)

# –ù–∞—á–∞–ª–æ –∑–∞–∫–∞–∑–∞
async def order(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
    if not check_rate_limit(user_id):
        await update.message.reply_text(
            "‚è≥ **–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!**\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ {MAX_REQUESTS_PER_HOUR} –∑–∞–∫–∞–∑–æ–≤ –≤ —á–∞—Å.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END
    
    await log_user_action(user_id, "order_command")
    # Updated keyboard to include prices for each work type
    keyboard = create_keyboard_with_back([
        ["üìù –≠—Å—Å–µ - 300‚ÇΩ", "üìú –î–æ–∫–ª–∞–¥ - 300‚ÇΩ"],
        ["üìñ –†–µ—Ñ–µ—Ä–∞—Ç - 400‚ÇΩ", "üíº –ü—Ä–æ–µ–∫—Ç - 400‚ÇΩ"],
        ["üìö –ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ - 500‚ÇΩ"],
        ["üéì –î–∏–ø–ª–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞ - 800‚ÇΩ"]
    ], show_back=False)
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("ü•∑ *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã:* ü•∑", reply_markup=reply_markup)
    context.user_data["current_step"] = WORK_TYPE
    return WORK_TYPE

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
async def back_button_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    query = update.callback_query
    await query.answer()
    
    # –≠–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º "‚óÄÔ∏è –ù–∞–∑–∞–¥"
    class FakeMessage:
        def __init__(self):
            self.text = "‚óÄÔ∏è –ù–∞–∑–∞–¥"
            self.chat_id = query.message.chat_id
    
    class FakeUpdate:
        def __init__(self):
            self.message = FakeMessage()
            self.effective_user = query.from_user
    
    fake_update = FakeUpdate()
    return await go_back_handler(fake_update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —ç—Ç–∞–ø–æ–≤ –∑–∞–∫–∞–∑–∞
async def work_type_handler(update: Update, context: CallbackContext) -> int:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ù–∞–∑–∞–¥"
    if update.message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        return await go_back_handler(update, context)
    
    # Parse selected work type and price if present
    selection = update.message.text
    if " - " in selection:
        type_text, price_text = selection.split(" - ", 1)
        context.user_data["work_type"] = type_text
        try:
            context.user_data["price"] = int(price_text.replace("‚ÇΩ","").replace(" ", ""))
        except ValueError:
            context.user_data["price"] = None
    else:
        context.user_data["work_type"] = selection
        context.user_data["price"] = None
    
    # –®–∞–≥ 1 –∏–∑ 6: –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞
    keyboard = create_keyboard_with_back([], show_back=True)
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "üìù –®–∞–≥ 1/6: –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞):",
        reply_markup=reply_markup
    )
    context.user_data["current_step"] = SCIENCE_NAME
    return SCIENCE_NAME

async def science_name_handler(update: Update, context: CallbackContext) -> int:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ù–∞–∑–∞–¥"
    if update.message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        return await go_back_handler(update, context)
    
    try:
        science_name = validate_user_input(update.message.text, 100)
        context.user_data["science_name"] = science_name
    except ValueError as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
        return SCIENCE_NAME
    
    # –®–∞–≥ 2 –∏–∑ 6: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü (—Å —É—á—ë—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤)
    work_type = context.user_data.get("work_type", "")
    clean_type = re.sub(r"[^–ê-–Ø–∞-—è–Å—ë ]", "", work_type).strip()
    max_pages = PAGE_LIMITS.get(clean_type, 10)
    
    keyboard = create_keyboard_with_back([], show_back=True)
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        f"üìù –®–∞–≥ 2/6: –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü (–º–∞–∫—Å–∏–º—É–º {max_pages}):",
        reply_markup=reply_markup
    )
    context.user_data["current_step"] = PAGE_NUMBER
    return PAGE_NUMBER

async def page_number_handler(update: Update, context: CallbackContext) -> int:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ù–∞–∑–∞–¥"
    if update.message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        return await go_back_handler(update, context)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    try:
        page = int(update.message.text)
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return PAGE_NUMBER
    work_type = context.user_data.get("work_type", "")
    clean_type = re.sub(r"[^–ê-–Ø–∞-—è–Å—ë ]", "", work_type).strip()
    max_pages = PAGE_LIMITS.get(clean_type, 10)
    if page < 1 or page > max_pages:
        await update.message.reply_text(
            f"‚ùóÔ∏è–î–ª—è {clean_type} –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü ‚Äî {max_pages}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {max_pages}:"
        )
        return PAGE_NUMBER
    context.user_data["page_number"] = page
    
    # –®–∞–≥ 3 –∏–∑ 6: —Ç–µ–º–∞ —Ä–∞–±–æ—Ç—ã
    keyboard = create_keyboard_with_back([], show_back=True)
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "üìù –®–∞–≥ 3/6: –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É —Ä–∞–±–æ—Ç—ã:",
        reply_markup=reply_markup
    )
    context.user_data["current_step"] = WORK_THEME
    return WORK_THEME

async def work_theme_handler(update: Update, context: CallbackContext) -> int:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ù–∞–∑–∞–¥"
    if update.message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        return await go_back_handler(update, context)
    
    try:
        work_theme = validate_user_input(update.message.text, 200)
        context.user_data["work_theme"] = work_theme
    except ValueError as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
        return WORK_THEME
        
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π
    keyboard = create_keyboard_with_back([
        ["ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω"],
        ["‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ø–ª–∞–Ω"]
    ], show_back=True)
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "üìù –®–∞–≥ 4/6: –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ —Ä–∞–±–æ—Ç—ã:",
        reply_markup=reply_markup
    )
    context.user_data["current_step"] = CUSTOM_PLAN
    return CUSTOM_PLAN

async def custom_plan_handler(update: Update, context: CallbackContext) -> int:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ù–∞–∑–∞–¥"
    if update.message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        return await go_back_handler(update, context)
    
    choice = update.message.text
    
    if choice == "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω":
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º
        context.user_data["use_custom_plan"] = False
        keyboard = create_keyboard_with_back([], show_back=True)
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text(
            "üìù –®–∞–≥ 5/6: –û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∏–ª—å, –∏—Å—Ç–æ—á–Ω–∏–∫–∏, —Å—Ä–æ–∫–∏):",
            reply_markup=reply_markup
        )
        context.user_data["current_step"] = PREFERENCES
        return PREFERENCES
    elif choice == "‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ø–ª–∞–Ω":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–ª–∞–Ω
        context.user_data["use_custom_plan"] = True
        keyboard = create_keyboard_with_back([], show_back=True)
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text(
            "üìù –®–∞–≥ 5/6: –í–≤–µ–¥–∏—Ç–µ –ø–ª–∞–Ω –≤–∞—à–µ–π —Ä–∞–±–æ—Ç—ã.\n\n"
            "–ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –ø–ª–∞–Ω–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "1. –í–≤–µ–¥–µ–Ω–∏–µ\n"
            "2. –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å\n"
            "3. –ó–∞–∫–ª—é—á–µ–Ω–∏–µ\n\n"
            "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ:\n"
            "–í–≤–µ–¥–µ–Ω–∏–µ\n"
            "–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å\n"
            "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ",
            reply_markup=reply_markup
        )
        context.user_data["current_step"] = PREFERENCES
        return PREFERENCES
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        )
        return CUSTOM_PLAN

async def preferences_handler(update: Update, context: CallbackContext) -> int:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ù–∞–∑–∞–¥"
    if update.message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        return await go_back_handler(update, context)
    
    use_custom_plan = context.user_data.get("use_custom_plan", False)
    plan_entered = context.user_data.get("plan_entered", False)
    
    if use_custom_plan and not plan_entered:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–ª–∞–Ω
        try:
            custom_plan_text = validate_user_input(update.message.text, 1000)
            # –†–∞–∑–±–∏–≤–∞–µ–º –ø–ª–∞–Ω –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
            plan_lines = [line.strip() for line in custom_plan_text.split('\n') if line.strip()]
            
            # –û—á–∏—â–∞–µ–º –æ—Ç –Ω—É–º–µ—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            cleaned_plan = []
            for line in plan_lines:
                # –£–±–∏—Ä–∞–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
                cleaned_line = re.sub(r'^\d+\.?\s*', '', line).strip()
                if cleaned_line:
                    cleaned_plan.append(cleaned_line)
            
            if len(cleaned_plan) < 2:
                await update.message.reply_text(
                    "‚ö†Ô∏è –ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 –ø—É–Ω–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return PREFERENCES
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—É–Ω–∫—Ç–æ–≤ –∑–∞—è–≤–ª–µ–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç—Ä–∞–Ω–∏—Ü
            page_number = context.user_data.get("page_number", 0)
            expected_chapters = max(1, page_number // 2)  # –ú–∏–Ω–∏–º—É–º 1 –ø—É–Ω–∫—Ç
            plan_chapters = len(cleaned_plan)
            
            warning_text = ""
            if plan_chapters < expected_chapters:
                warning_text = f"\n\n‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –î–ª—è {page_number} —Å—Ç—Ä–∞–Ω–∏—Ü –æ–±—ã—á–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è {expected_chapters} –ø—É–Ω–∫—Ç–æ–≤ –ø–ª–∞–Ω–∞, " \
                              f"–∞ —É –≤–∞—Å {plan_chapters}. –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –º–µ–Ω—å—à–µ–º—É –æ–±—ä–µ–º—É –∏—Ç–æ–≥–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã."
            elif plan_chapters > expected_chapters * 1.5:  # –ï—Å–ª–∏ –ø—É–Ω–∫—Ç–æ–≤ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
                warning_text = f"\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –£ –≤–∞—Å {plan_chapters} –ø—É–Ω–∫—Ç–æ–≤ –ø–ª–∞–Ω–∞ –¥–ª—è {page_number} —Å—Ç—Ä–∞–Ω–∏—Ü. " \
                              f"–≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ–º—É —Ä–∞—Å–∫—Ä—ã—Ç–∏—é —Ç–µ–º—ã –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞."
                
            context.user_data["custom_plan"] = cleaned_plan
            context.user_data["plan_entered"] = True
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            plan_preview = "\n".join([f"{i+1}. {item}" for i, item in enumerate(cleaned_plan)])
            keyboard = create_keyboard_with_back([], show_back=True)
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
            await update.message.reply_text(
                f"‚úÖ –ü–ª–∞–Ω –ø—Ä–∏–Ω—è—Ç:\n\n{plan_preview}{warning_text}\n\nüìù –®–∞–≥ 6/6: –û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∏–ª—å, –∏—Å—Ç–æ—á–Ω–∏–∫–∏, —Å—Ä–æ–∫–∏):",
                reply_markup=reply_markup
            )
            return PREFERENCES
            
        except ValueError as e:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
            return PREFERENCES
    else:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∞ –∏–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ)
        try:
            preferences = validate_user_input(update.message.text, 500)
            context.user_data["preferences"] = preferences
        except ValueError as e:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
            return PREFERENCES
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ
        work_type = context.user_data["work_type"]
        price = context.user_data.get("price")
        if price is None:
            if work_type in ["üìù –≠—Å—Å–µ","üìú –î–æ–∫–ª–∞–¥"]:
                price = 300
            elif work_type in ["üìñ –†–µ—Ñ–µ—Ä–∞—Ç","üíº –ü—Ä–æ–µ–∫—Ç"]:
                price = 400
            elif work_type == "üìö –ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞":
                price = 500
            elif work_type == "üéì –î–∏–ø–ª–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞":
                price = 800
            else:
                price = 300
        
        context.user_data["current_step"] = PAYMENT
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        if TESTING_MODE:
            # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
            keyboard = [
                [InlineKeyboardButton("üß™ –¢–ï–°–¢–û–í–´–ô –ó–ê–ö–ê–ó (–ë–ï–°–ü–õ–ê–¢–ù–û)", callback_data="test_order")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                f"üß™ *–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú* üß™\n\n"
                f"–û–±—ã—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±–ª–µ–π\n"
                f"–í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ - –ë–ï–°–ü–õ–ê–¢–ù–û!\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ YooKassa
            keyboard = [
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="pay")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                f"üí∞ *–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞* üí∞\n\n"
                f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {price} —Ä—É–±–ª–µ–π\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        return PAYMENT


async def create_payment(update: Update, context: CallbackContext) -> int:
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ YooKassa
        if not YOOKASSA_SHOP_ID or not YOOKASSA_SECRET_KEY:
            await update.callback_query.answer("‚ùå –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            await update.callback_query.edit_message_text(
                "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_id = update.callback_query.from_user.id
        order_data = {
            "work_type": context.user_data.get("work_type", ""),
            "science_name": context.user_data.get("science_name", ""),
            "work_theme": context.user_data.get("work_theme", ""),
            "page_number": context.user_data.get("page_number", 0),
            "price": context.user_data.get("price", 0)
        }
        order_id = await create_order(user_id, order_data)
        context.user_data["order_id"] = order_id
        
        work_type = context.user_data["work_type"]
        price_map = {"–≠—Å—Å–µ": 300, "–î–æ–∫–ª–∞–¥": 300, "–†–µ—Ñ–µ—Ä–∞—Ç": 400, "–ü—Ä–æ–µ–∫—Ç": 400, "–ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞": 500, "–î–∏–ø–ª–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞": 800}
        price = price_map.get(work_type, 300)
        context.user_data["price"] = price
        
        try:
            # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–ª–∞—Ç–µ–∂–∞
            logging.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}, —Å—É–º–º–∞: {price}")
            logging.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: email=user{user_id}@ninjaessayai.com")
            
            payment = Payment.create({
                "amount": {"value": f"{price}.00", "currency": "RUB"},
                "confirmation": {"type": "redirect", "return_url": "https://t.me/your_bot"},
                "capture": True,
                "description": f"{work_type} - {context.user_data.get('work_theme', '–¢–µ–º–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}",
                "metadata": {"order_id": str(order_id)},
                "receipt": {
                    "customer": {
                        "email": f"user{user_id}@ninjaessayai.com"
                    },
                    "items": [
                        {
                            "description": f"–ù–∞–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã: {work_type}",
                            "quantity": "1.00",
                            "amount": {
                                "value": f"{price}.00",
                                "currency": "RUB"
                            },
                            "vat_code": 1,
                            "payment_mode": "full_payment",
                            "payment_subject": "service"
                        }
                    ]
                }
            }, uuid.uuid4())
            
            logging.info(f"–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {payment.id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å payment_id
            await update_order_status(order_id, "payment_created", payment.id)
            
            await update.callback_query.answer()
            await update.callback_query.edit_message_text(
                f"üí≥ –û–ø–ª–∞—Ç–∞ {price}‚ÇΩ\n\n"
                f"üîó [–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ]({payment.confirmation.confirmation_url})\n\n"
                "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ä–∞–±–æ—Ç–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (5-15 –º–∏–Ω—É—Ç).",
                parse_mode='Markdown'
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–ª–∞—Ç–µ–∂–∞
            asyncio.create_task(monitor_payment(context, update.callback_query.from_user.id, payment.id))
            return ConversationHandler.END
            
        except Exception as payment_error:
            # –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
            error_details = str(payment_error)
            if hasattr(payment_error, '__dict__'):
                error_details = getattr(payment_error, '__dict__', str(payment_error))
            
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {payment_error}")
            logging.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_details}")
            
            await update_order_status(order_id, "payment_failed")
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞")
            await update.callback_query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            return ConversationHandler.END
            
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ create_payment: {e}")
        try:
            await update.callback_query.answer("‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞")
            await update.callback_query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
        except:
            pass
        return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –∏ –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
async def monitor_payment(context: CallbackContext, chat_id: int, payment_id: str) -> None:
    try:
        order_id = context.user_data.get("order_id")
        
        while True:
            payment = Payment.find_one(payment_id)
            status = payment.status
            
            if status == "succeeded":
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
                if order_id:
                    await update_order_status(order_id, "paid", payment_id)
                
                # –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
                try:
                    await context.bot.send_message(chat_id=chat_id, text="‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞! –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.")
                    await context.bot.send_message(chat_id=chat_id, text="üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—à–µ–π —Ä–∞–±–æ—Ç—ã... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ!")
                    
                    plan_array = await generate_plan(context)
                    if not plan_array:
                        raise RuntimeError("–ü–ª–∞–Ω –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
                    context.user_data["plan_array"] = plan_array
                    
                    doc_io = await generate_text(plan_array, context)
                    if doc_io is None:
                        raise RuntimeError("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω")
                    
                    # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                    work_type = context.user_data.get("work_type", "–†–∞–±–æ—Ç–∞")
                    work_theme = context.user_data.get("work_theme", "–¢–µ–º–∞")
                    safe_type = sanitize_filename(work_type)
                    safe_theme = sanitize_filename(work_theme)
                    filename = f"{safe_type}_{safe_theme}.docx"
                    
                    await context.bot.send_document(
                        chat_id=chat_id, 
                        document=doc_io, 
                        filename=filename,
                        caption="‚úÖ –í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –≥–æ—Ç–æ–≤–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ NinjaEssayAI!"
                    )
                    await context.bot.send_message(chat_id=chat_id, text="üéâ –í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
                    if order_id:
                        await update_order_status(order_id, "completed")
                    
                    return
                    
                except Exception as gen_error:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {gen_error}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π
                    if order_id:
                        await update_order_status(order_id, "failed")
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
                    price = context.user_data.get("price")
                    if price is None and hasattr(payment, 'amount'):
                        try:
                            price = float(payment.amount.value)
                        except Exception:
                            price = None
                    amount_value = f"{float(price):.2f}" if price is not None else payment.amount.value
                    
                    try:
                        Refund.create({
                            "payment_id": payment_id,
                            "amount": {"value": amount_value, "currency": "RUB"}
                        }, uuid.uuid4())
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∫–∞–∫ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–π
                        if order_id:
                            await update_order_status(order_id, "refunded")
                        
                        await context.bot.send_message(chat_id=chat_id, text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–ª–∞—Ç–µ–∂ –≤–æ–∑–≤—Ä–∞—â—ë–Ω.")
                    except Exception as refund_error:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –ø–ª–∞—Ç–µ–∂–∞: {refund_error}")
                        await context.bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                    return
                    
            if status in ("canceled", "failed"):
                if order_id:
                    await update_order_status(order_id, "cancelled")
                await context.bot.send_message(chat_id=chat_id, text="‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω—ë–Ω –∏–ª–∏ –Ω–µ –ø—Ä–æ—à—ë–ª. –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
                return
                
            await asyncio.sleep(5)
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await context.bot.send_message(chat_id=chat_id, text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞.")
        return

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã)
async def create_test_order(update: Update, context: CallbackContext) -> int:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    try:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            "üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!\n"
            "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∞—à–µ–π —Ä–∞–±–æ—Ç—ã... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ!"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_id = update.callback_query.from_user.id
        order_data = {
            "work_type": context.user_data.get("work_type", ""),
            "science_name": context.user_data.get("science_name", ""),
            "work_theme": context.user_data.get("work_theme", ""),
            "page_number": context.user_data.get("page_number", 0),
            "price": 0  # –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        }
        order_id = await create_order(user_id, order_data)
        await update_order_status(order_id, "test_paid")  # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
        
        # –°—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é (–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞)
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞
            plan_array = await generate_plan(context)
            if not plan_array:
                raise RuntimeError("–ü–ª–∞–Ω –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            context.user_data["plan_array"] = plan_array
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
            doc_io = await generate_text(plan_array, context)
            if doc_io is None:
                raise RuntimeError("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω")
            
            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            work_type = context.user_data.get("work_type", "–†–∞–±–æ—Ç–∞")
            work_theme = context.user_data.get("work_theme", "–¢–µ–º–∞")
            safe_type = sanitize_filename(work_type)
            safe_theme = sanitize_filename(work_theme)
            filename = f"{safe_type}_{safe_theme}.docx"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            await update.callback_query.message.reply_document(
                document=doc_io, 
                filename=filename,
                caption="‚úÖ –í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –≥–æ—Ç–æ–≤–∞! (–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)\nüéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ NinjaEssayAI!"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
            await update_order_status(order_id, "test_completed")
            
        except Exception as gen_error:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ: {gen_error}")
            await update_order_status(order_id, "test_failed")
            await update.callback_query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
        
        return ConversationHandler.END
        
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ create_test_order: {e}")
        try:
            await update.callback_query.answer("‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞")
            await update.callback_query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
        except:
            pass
        return ConversationHandler.END



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
# –£–ø—Ä–æ—â–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏
async def send_loading_message(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—à–µ–π —Ä–∞–±–æ—Ç—ã... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ!")

# –í—ã–∑–æ–≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –ø–ª–∞–Ω–∞ –∏ —Ç–µ–∫—Å—Ç–∞
async def pay(update: Update, context: CallbackContext) -> int:
    logging.info("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.")
    await update.message.reply_text("–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞! –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.")

    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏
    await send_loading_message(update, context)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞
    logging.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ —Ä–∞–±–æ—Ç—ã.")
    plan_array = await generate_plan(context)
    context.user_data["plan_array"] = plan_array
    logging.info(f"–ü–ª–∞–Ω —Ä–∞–±–æ—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {plan_array}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –ø–∞–º—è—Ç–∏
    logging.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ –≥–ª–∞–≤–∞–º –ø–ª–∞–Ω–∞.")
    doc_io = await generate_text(plan_array, context)
    
    if doc_io is None:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
        return ConversationHandler.END
    
    logging.info("–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–º—è—Ç–∏")

    # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    work_type = context.user_data.get("work_type", "–†–∞–±–æ—Ç–∞")
    work_theme = context.user_data.get("work_theme", "–¢–µ–º–∞")
    safe_type = sanitize_filename(work_type)
    safe_theme = sanitize_filename(work_theme)
    filename = f"{safe_type}_{safe_theme}.docx"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ø–∞–º—è—Ç–∏
    await update.message.reply_document(
        document=doc_io,
        filename=filename,
        caption="‚úÖ –í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –≥–æ—Ç–æ–≤–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ NinjaEssayAI!"
    )

    await update.message.reply_text("üéâ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!")
    logging.info("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    return ConversationHandler.END

# Enhanced error handling in the generate_plan function.
async def generate_plan(context: CallbackContext) -> list:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–ª–∞–Ω
    use_custom_plan = context.user_data.get("use_custom_plan", False)
    page_number = context.user_data.get("page_number", 0)
    
    if use_custom_plan:
        custom_plan = context.user_data.get("custom_plan", [])
        if custom_plan:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—É–Ω–∫—Ç–æ–≤ –ø–ª–∞–Ω–∞ –∑–∞—è–≤–ª–µ–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç—Ä–∞–Ω–∏—Ü
            expected_chapters = max(1, page_number // 2)  # –ú–∏–Ω–∏–º—É–º 1 –ø—É–Ω–∫—Ç
            plan_chapters = len(custom_plan)
            
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–ª–∞–Ω: {custom_plan}")
            logging.info(f"–ó–∞—è–≤–ª–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {page_number}, –ø—É–Ω–∫—Ç–æ–≤ –≤ –ø–ª–∞–Ω–µ: {plan_chapters}, –æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_chapters}")
            
            # –ï—Å–ª–∏ –ø—É–Ω–∫—Ç–æ–≤ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–ª—è –∑–∞—è–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
            if plan_chapters < expected_chapters:
                try:
                    chat_id = get_chat_id(context)
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –î–ª—è {page_number} —Å—Ç—Ä–∞–Ω–∏—Ü —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è {expected_chapters} –ø—É–Ω–∫—Ç–æ–≤ –ø–ª–∞–Ω–∞, "
                             f"–∞ —É –≤–∞—Å {plan_chapters}. –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –æ–±—ä–µ–º —Ä–∞–±–æ—Ç—ã."
                    )
                except Exception as chat_error:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {chat_error}")
            
            return custom_plan
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∞ –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    logging.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ DeepSeek API.")
    
    science_name = context.user_data.get("science_name", "")
    work_type = context.user_data.get("work_type", "")
    work_theme = context.user_data.get("work_theme", "")
    preferences = context.user_data.get("preferences", "")
    page_number = context.user_data.get("page_number", 0)

    if not science_name or not work_type or not work_theme or not page_number:
        logging.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞.")
        try:
            chat_id = get_chat_id(context)
            await context.bot.send_message(
                chat_id=chat_id,
                text="–û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
            )
        except Exception as chat_error:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {chat_error}")
        return []

    calls_number = max(1, page_number // 2)  # –ú–∏–Ω–∏–º—É–º 1 –ø—É–Ω–∫—Ç

    prompt = (
        f"–î–µ–π—Å—Ç–≤—É–π –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ {science_name}. "
        f"–°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –∏–∑ {calls_number} –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è {work_type} "
        f"–ø–æ —Ç–µ–º–µ: {work_theme}. –£—á—Ç–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {preferences}. "
        "–í–µ—Ä–Ω–∏ –ø–ª–∞–Ω –≤ –≤–∏–¥–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ "
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä, 1. –†–∞–∑–¥–µ–ª 1\n2. –†–∞–∑–¥–µ–ª 2). "
        "–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –≤–≤–æ–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ '–û—Ç–ª–∏—á–Ω–æ', '–í–æ—Ç –ø–ª–∞–Ω', '–°–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Å —É—á–µ—Ç–æ–º'. "
        "–ù–∞—á–∏–Ω–∞–π —Å—Ä–∞–∑—É —Å –ø—É–Ω–∫—Ç–∞ 1."
    )

    try:
        response = await client.chat.completions.create(
            model="deepseek-reasoner",
            messages=[
                {"role": "system", "content": "mode: plan_generation"},
                {"role": "user", "content": prompt}
            ],
            stream=False
        )
        response_content = response.choices[0].message.content
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ DeepSeek API: {e}")
        try:
            chat_id = get_chat_id(context)
            await context.bot.send_message(
                chat_id=chat_id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except Exception as chat_error:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {chat_error}")
        return []

    logging.info("–û—Ç–≤–µ—Ç –æ—Ç DeepSeek API –ø–æ–ª—É—á–µ–Ω.")

    try:
        plan_array = json.loads(response_content)
        if not isinstance(plan_array, list):
            raise ValueError("–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º.")
    except (json.JSONDecodeError, ValueError):
        logging.info("–û—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç.")
        lines = response_content.splitlines()
        plan_array = [line.strip() for line in lines if line.strip()]
        plan_array = [re.sub(r'^\d+\.\s*', '', item) for item in plan_array]

    if len(plan_array) > calls_number:
        plan_array = plan_array[:calls_number]
    elif len(plan_array) < calls_number:
        plan_array.extend([f"–†–∞–∑–¥–µ–ª {i+1}" for i in range(len(plan_array), calls_number)])

    logging.info(f"–ò—Ç–æ–≥–æ–≤—ã–π –ø–ª–∞–Ω: {plan_array}")
    return plan_array

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
def add_page_number(section):
    footer = section.footer
    footer_paragraph = footer.paragraphs[0] if footer.paragraphs else footer.add_paragraph()
    footer_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
    run = footer_paragraph.add_run()
    fldChar1 = OxmlElement('w:fldChar')
    fldChar1.set(qn('w:fldCharType'), 'begin')
    run._r.append(fldChar1)
    instrText = OxmlElement('w:instrText')
    instrText.text = 'PAGE'
    run._r.append(instrText)
    fldChar2 = OxmlElement('w:fldChar')
    fldChar2.set(qn('w:fldCharType'), 'end')
    run._r.append(fldChar2)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∏—Ç—É–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
def add_title_page(doc, work_type, work_theme, science_name, page_number):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–∏—Ç—É–ª—å–Ω—ã–π –ª–∏—Å—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç"""
    
    # –ù–∞–∑–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è
    university_p = doc.add_paragraph()
    university_p.alignment = WD_ALIGN_PARAGRAPH.CENTER
    university_run = university_p.add_run("–ú–ò–ù–ò–°–¢–ï–†–°–¢–í–û –û–ë–†–ê–ó–û–í–ê–ù–ò–Ø –ò –ù–ê–£–ö–ò –†–û–°–°–ò–ô–°–ö–û–ô –§–ï–î–ï–†–ê–¶–ò–ò\n")
    university_run.font.name = 'Times New Roman'
    university_run.font.size = Pt(14)
    university_run.font.bold = True
    
    university_run2 = university_p.add_run("–§–ï–î–ï–†–ê–õ–¨–ù–û–ï –ì–û–°–£–î–ê–†–°–¢–í–ï–ù–ù–û–ï –ë–Æ–î–ñ–ï–¢–ù–û–ï –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–û–ï –£–ß–†–ï–ñ–î–ï–ù–ò–ï\n")
    university_run2.font.name = 'Times New Roman'
    university_run2.font.size = Pt(14)
    university_run2.font.bold = True
    
    university_run3 = university_p.add_run("–í–´–°–®–ï–ì–û –û–ë–†–ê–ó–û–í–ê–ù–ò–Ø\n")
    university_run3.font.name = 'Times New Roman'
    university_run3.font.size = Pt(14)
    university_run3.font.bold = True
    
    university_run4 = university_p.add_run("¬´–†–û–°–°–ò–ô–°–ö–ò–ô –£–ù–ò–í–ï–†–°–ò–¢–ï–¢¬ª")
    university_run4.font.name = 'Times New Roman'
    university_run4.font.size = Pt(14)
    university_run4.font.bold = True
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø
    doc.add_paragraph()
    doc.add_paragraph()
    doc.add_paragraph()
    
    # –ö–∞—Ñ–µ–¥—Ä–∞
    department_p = doc.add_paragraph()
    department_p.alignment = WD_ALIGN_PARAGRAPH.CENTER
    department_run = department_p.add_run(f"–ö–∞—Ñ–µ–¥—Ä–∞ {science_name}")
    department_run.font.name = 'Times New Roman'
    department_run.font.size = Pt(14)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø
    doc.add_paragraph()
    doc.add_paragraph()
    
    # –¢–∏–ø —Ä–∞–±–æ—Ç—ã
    work_type_p = doc.add_paragraph()
    work_type_p.alignment = WD_ALIGN_PARAGRAPH.CENTER
    work_type_run = work_type_p.add_run(work_type.upper())
    work_type_run.font.name = 'Times New Roman'
    work_type_run.font.size = Pt(16)
    work_type_run.font.bold = True
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø
    doc.add_paragraph()
    
    # –¢–µ–º–∞ —Ä–∞–±–æ—Ç—ã
    theme_p = doc.add_paragraph()
    theme_p.alignment = WD_ALIGN_PARAGRAPH.CENTER
    theme_run = theme_p.add_run(f"–Ω–∞ —Ç–µ–º—É: ¬´{work_theme}¬ª")
    theme_run.font.name = 'Times New Roman'
    theme_run.font.size = Pt(14)
    theme_run.font.bold = True
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø
    doc.add_paragraph()
    doc.add_paragraph()
    doc.add_paragraph()
    doc.add_paragraph()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ (—Å–ø—Ä–∞–≤–∞)
    info_table = doc.add_table(rows=6, cols=2)
    info_table.alignment = WD_ALIGN_PARAGRAPH.RIGHT
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    for row in info_table.rows:
        for cell in row.cells:
            for paragraph in cell.paragraphs:
                paragraph.alignment = WD_ALIGN_PARAGRAPH.LEFT
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
    info_table.cell(0, 0).text = "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞:"
    info_table.cell(0, 1).text = science_name
    
    info_table.cell(1, 0).text = "–í—ã–ø–æ–ª–Ω–∏–ª(–∞):"
    info_table.cell(1, 1).text = "—Å—Ç—É–¥–µ–Ω—Ç(–∫–∞) –≥—Ä—É–ø–ø—ã ___________"
    
    info_table.cell(2, 0).text = ""
    info_table.cell(2, 1).text = "_________________________"
    
    info_table.cell(3, 0).text = "–ü—Ä–æ–≤–µ—Ä–∏–ª:"
    info_table.cell(3, 1).text = "_________________________"
    
    info_table.cell(4, 0).text = ""
    info_table.cell(4, 1).text = "(–¥–æ–ª–∂–Ω–æ—Å—Ç—å, —É—á–µ–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å, –∑–≤–∞–Ω–∏–µ)"
    
    info_table.cell(5, 0).text = ""
    info_table.cell(5, 1).text = "_________________________"
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ
    for row in info_table.rows:
        for cell in row.cells:
            for paragraph in cell.paragraphs:
                for run in paragraph.runs:
                    run.font.name = 'Times New Roman'
                    run.font.size = Pt(12)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø
    doc.add_paragraph()
    doc.add_paragraph()
    doc.add_paragraph()
    
    # –ì–æ–¥ –∏ –≥–æ—Ä–æ–¥
    footer_p = doc.add_paragraph()
    footer_p.alignment = WD_ALIGN_PARAGRAPH.CENTER
    footer_run = footer_p.add_run("–ú–æ—Å–∫–≤–∞ 2025")
    footer_run.font.name = 'Times New Roman'
    footer_run.font.size = Pt(14)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–≤ –ø–∞–º—è—Ç–∏)
async def generate_text(plan_array, context: CallbackContext) -> io.BytesIO:
    logging.info("–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø–æ –≥–ª–∞–≤–∞–º –ø–ª–∞–Ω–∞.")
    science_name = context.user_data["science_name"]
    work_type = context.user_data["work_type"]
    work_theme = context.user_data["work_theme"]
    preferences = context.user_data["preferences"]
    page_number = context.user_data.get("page_number", 0)

    if not plan_array:
        logging.error("–ü–ª–∞–Ω –ø—É—Å—Ç. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç.")
        try:
            chat_id = get_chat_id(context)
            await context.bot.send_message(
                chat_id=chat_id,
                text="–û—à–∏–±–∫–∞: –ü–ª–∞–Ω –ø—É—Å—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ DeepSeek –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–∞—Å—Å–∏–≤."
            )
        except Exception as chat_error:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {chat_error}")
        return None

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –Ω–∞ –≥–ª–∞–≤—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞—è–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    # –ü—Ä–∏–º–µ—Ä–Ω–æ 250-300 —Å–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –º–µ–∂–¥—É –≥–ª–∞–≤–∞–º–∏
    total_words = page_number * 275  # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    words_per_chapter = max(400, total_words // len(plan_array))  # –ú–∏–Ω–∏–º—É–º 400 —Å–ª–æ–≤ –Ω–∞ –≥–ª–∞–≤—É
    
    logging.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {page_number}, –≥–ª–∞–≤ –≤ –ø–ª–∞–Ω–µ: {len(plan_array)}, —Å–ª–æ–≤ –Ω–∞ –≥–ª–∞–≤—É: {words_per_chapter}")

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
    async def fetch_chapter_text(chapter: str) -> tuple[str, str]:
        logging.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≥–ª–∞–≤—ã: {chapter}")
        prompt = (
            f"–î–µ–π—Å—Ç–≤—É–π –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ {science_name}, "
            f"–Ω–∞–ø–∏—à–∏, —Å—Ç—Ä–æ–≥–æ —Å –æ–ø–æ—Ä–æ–π –Ω–∞ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, "
            f"–≥–ª–∞–≤—É: {chapter} –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è {work_type} "
            f"–ø–æ —Ç–µ–º–µ: {work_theme} (–Ω–∞–ø–∏—à–∏ –Ω–µ –º–µ–Ω–µ–µ {words_per_chapter} —Å–ª–æ–≤) "
            f"(–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±—É–¥—É—Ç –∏–º–µ—Ç—å —Ä–∞–∑–Ω—É—é –¥–ª–∏–Ω—É, "
            f"–∞ —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –∏–∑–±–µ–≥–∞—Ç—å—Å—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–¥–Ω–æ–∫–æ—Ä–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ "
            f"–≤ —Å–æ—Å–µ–¥–Ω–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö) "
            f"(–∏–∑–±–µ–≥–∞–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–±–ª—é–¥–µ–Ω–Ω—ã—Ö —Ç–æ–±–æ—é —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, "
            f"–≤–æ–∑–≤—Ä–∞—â–∞–π –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—Å—Ç, —Ç–∞–∫, –±—É–¥—Ç–æ –±—ã —Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å "
            f"–µ–≥–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é) "
            f"–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –≤–≤–æ–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ '–û—Ç–ª–∏—á–Ω–æ', '–í–æ—Ç —Ç–µ–∫—Å—Ç', '–†–∞—Å—Å–º–æ—Ç—Ä–∏–º'. "
            f"–ù–∞—á–∏–Ω–∞–π —Å—Ä–∞–∑—É —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è. {preferences}"
        )
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ DeepSeek –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Å–µ–º–∞—Ñ–æ—Ä–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
        try:
            async with GENERATION_SEMAPHORE:
                response = await client.chat.completions.create(
                    model="deepseek-reasoner",
                    messages=[{"role": "user", "content": prompt}],
                    stream=False
                )
            chapter_text = response.choices[0].message.content
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –æ—á–∏—â–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            chapter_text = validate_generated_content(chapter_text, chapter)
            logging.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –≥–ª–∞–≤—ã: {chapter_text[:100]}...")
            return chapter, chapter_text
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≥–ª–∞–≤—ã {chapter}: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å gather
            return chapter, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≥–ª–∞–≤—ã: {chapter}"

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    tasks = [fetch_chapter_text(chapter) for chapter in plan_array]
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    results = await asyncio.gather(*tasks, return_exceptions=True)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    chapters_text = []
    for result in results:
        if isinstance(result, Exception):
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ: {result}")
            try:
                chat_id = get_chat_id(context)
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            except Exception as chat_error:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {chat_error}")
            return None
        elif isinstance(result, tuple) and len(result) == 2:
            chapter, chapter_text = result
            chapters_text.append((chapter, chapter_text))
        else:
            logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {result}")
            return None

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –ø–∞–º—è—Ç–∏
    doc = docx.Document()
    section = doc.sections[0]
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–µ–π –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º: –≤–µ—Ä—Ö/–Ω–∏–∑ 25–º–º, –ª–µ–≤–æ 30–º–º, –ø—Ä–∞–≤–æ 10–º–º
    section.top_margin = Cm(2.5)     # 25 –º–º
    section.bottom_margin = Cm(2.5)  # 25 –º–º
    section.left_margin = Cm(3.0)    # 30 –º–º
    section.right_margin = Cm(1.0)   # 10 –º–º

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∏–ª—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    style = doc.styles['Normal']
    font = style.font
    font.name = 'Times New Roman'
    font.size = Pt(14)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –¥–ª—è —Å—Ç–∏–ª—è Normal
    paragraph_format = style.paragraph_format
    paragraph_format.line_spacing = 1.5  # –ò–Ω—Ç–µ—Ä–≤–∞–ª 1.5
    paragraph_format.first_line_indent = Cm(1.25)  # –û—Ç—Å—Ç—É–ø –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
    add_page_number(section)

    # === –¢–ò–¢–£–õ–¨–ù–´–ô –õ–ò–°–¢ ===
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏—Ç—É–ª—å–Ω—ã–π –ª–∏—Å—Ç
    add_title_page(doc, work_type, work_theme, science_name, context.user_data.get("page_number", 0))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ —Ç–∏—Ç—É–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
    doc.add_page_break()
    
    # === –û–ì–õ–ê–í–õ–ï–ù–ò–ï ===
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–û–≥–ª–∞–≤–ª–µ–Ω–∏–µ"
    contents_heading = doc.add_heading("–û–ì–õ–ê–í–õ–ï–ù–ò–ï", level=1)
    contents_heading.alignment = WD_ALIGN_PARAGRAPH.CENTER
    for run in contents_heading.runs:
        run.font.name = 'Times New Roman'
        run.font.size = Pt(16)
        run.font.bold = True
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç—ã –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è
    for i, chapter in enumerate(plan_array, 1):
        contents_p = doc.add_paragraph()
        contents_p.paragraph_format.first_line_indent = Cm(0)
        contents_p.paragraph_format.left_indent = Cm(0)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤—ã
        run = contents_p.add_run(f"{i}. {chapter}")
        run.font.name = 'Times New Roman'
        run.font.size = Pt(14)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏-–∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        dots_run = contents_p.add_run("." * (50 - len(f"{i}. {chapter}")))
        dots_run.font.name = 'Times New Roman'
        dots_run.font.size = Pt(14)
        
        page_run = contents_p.add_run(f"{i + 2}")  # +2 –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–∏—Ç—É–ª—å–Ω—ã–π –ª–∏—Å—Ç –∏ –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ
        page_run.font.name = 'Times New Roman'
        page_run.font.size = Pt(14)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è
    doc.add_page_break()

    # === –û–°–ù–û–í–ù–û–ï –°–û–î–ï–†–ñ–ê–ù–ò–ï ===
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–∞–±–æ—Ç—ã
    main_heading = doc.add_heading(f"{work_type} –ø–æ —Ç–µ–º–µ: {work_theme}", level=1)
    main_heading.alignment = WD_ALIGN_PARAGRAPH.CENTER
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    for run in main_heading.runs:
        run.font.name = 'Times New Roman'
        run.font.size = Pt(16)
        run.font.bold = True

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≥–ª–∞–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç
    for chapter, chapter_text in chapters_text:
        chapter_heading = doc.add_heading(chapter, level=2)
        chapter_heading.alignment = WD_ALIGN_PARAGRAPH.LEFT
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≥–ª–∞–≤—ã
        for run in chapter_heading.runs:
            run.font.name = 'Times New Roman'
            run.font.size = Pt(14)
        
        p = doc.add_paragraph(chapter_text)
        p.paragraph_format.line_spacing = 1.5
        p.paragraph_format.first_line_indent = Cm(1.25)
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à—Ä–∏—Ñ—Ç
        for run in p.runs:
            run.font.name = 'Times New Roman'
            run.font.size = Pt(14)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –ø–∞–º—è—Ç—å
    doc_io = io.BytesIO()
    doc.save(doc_io)
    doc_io.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
    
    logging.info("–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–º—è—Ç–∏")
    return doc_io

async def cancel(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("order", order)],
        states={
            WORK_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, work_type_handler)],
            SCIENCE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, science_name_handler)],
            PAGE_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, page_number_handler)],
            WORK_THEME: [MessageHandler(filters.TEXT & ~filters.COMMAND, work_theme_handler)],
            CUSTOM_PLAN: [MessageHandler(filters.TEXT & ~filters.COMMAND, custom_plan_handler)],
            PREFERENCES: [MessageHandler(filters.TEXT & ~filters.COMMAND, preferences_handler)],
            PAYMENT: [
                CallbackQueryHandler(create_payment, pattern="^pay$"),
                CallbackQueryHandler(create_test_order, pattern="^test_order$"),
                CallbackQueryHandler(back_button_handler, pattern="^back$"),
                CommandHandler("cancel", cancel)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex("^–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å$"), continue_handler))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(conv_handler)
    
    # –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("admin_stats", admin_stats))
    application.add_handler(CommandHandler("admin_users", admin_users))
    application.add_handler(CommandHandler("admin_orders", admin_orders))
    application.add_handler(CommandHandler("admin_system", admin_system))
    application.add_handler(CommandHandler("broadcast", admin_broadcast))
    application.add_handler(CommandHandler("admin_finance", admin_finance))
    application.add_handler(CommandHandler("admin_export", admin_export))
    application.add_handler(CommandHandler("admin_monitor", admin_monitor))

    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é!")
    application.run_polling()

if __name__ == "__main__":
    main()